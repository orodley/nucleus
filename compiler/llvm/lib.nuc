(extern LLVMGetGlobalContext () -> *)

(extern LLVMCreateBuilder () -> *)

(extern LLVMModuleCreateWithNameInContext (char* *) -> *)
(extern LLVMDumpModule (*) -> void)
(extern LLVMWriteBitcodeToFile (* char*) -> int)
(extern LLVMDisposeModule (*) -> void)
(extern LLVMAddFunction (* char* *) -> *)
(extern LLVMGetNamedFunction (* char*) -> *)
(extern LLVMAddGlobal (* * char*) -> *)
(extern LLVMGetNamedGlobal (* char*) -> *)
(extern LLVMSetInitializer (* *) -> void)

(extern LLVMConstInt (* long-long bool) -> *)
(extern LLVMConstIntOfString (* char* u8) -> *)
(extern LLVMConstNull (*) -> *)
(extern LLVMIsConstant (*) -> bool)
(extern LLVMConstIntGetSExtValue (*) -> long-long)
(extern LLVMGetUndef (*) -> *)

(extern LLVMAppendBasicBlock (* char*) -> *)
(extern LLVMDeleteBasicBlock (*) -> void)
(extern LLVMGetInsertBlock (*) -> *)
(extern LLVMGetBasicBlockParent (*) -> *)
(extern LLVMPositionBuilderAtEnd (* *) -> void)
(extern LLVMAddIncoming (* array array uint) -> void)
(defun get-current-func (builder)
  (LLVMGetBasicBlockParent (LLVMGetInsertBlock builder)))

(extern LLVMTypeOf (*) -> *)
(extern LLVMGetIntTypeWidth (*) -> uint)

(extern LLVMIntType (uint) -> *)
(extern LLVMFloatType () -> *)
(extern LLVMPointerType (* uint) -> *)
(extern LLVMStructType (array uint bool) -> *)
(extern LLVMArrayType (* uint) -> *)
(extern LLVMFunctionType (* array uint bool) -> *)
(extern LLVMVoidType () -> *)

(extern LLVMBuildAdd (* * * char*) -> *)
(extern LLVMBuildFAdd (* * * char*) -> *)
(extern LLVMBuildSub (* * * char*) -> *)
(extern LLVMBuildFSub (* * * char*) -> *)
(extern LLVMBuildMul (* * * char*) -> *)
(extern LLVMBuildFMul (* * * char*) -> *)
(extern LLVMBuildSDiv (* * * char*) -> *)
(extern LLVMBuildFDiv (* * * char*) -> *)
(extern LLVMBuildSRem (* * * char*) -> *)
(extern LLVMBuildFRem (* * * char*) -> *)
(extern LLVMBuildLShr (* * * char*) -> *)
(extern LLVMBuildAShr (* * * char*) -> *)
(extern LLVMBuildShl (* * * char*) -> *)
(extern LLVMBuildAnd (* * * char*) -> *)
(extern LLVMBuildOr (* * * char*) -> *)
(extern LLVMBuildIntCast (* * * char*) -> *)
(extern LLVMBuildBitCast (* * * char*) -> *)
(extern LLVMBuildZExt (* * * char*) -> *)
(extern LLVMBuildSIToFP (* * * char*) -> *)
(extern LLVMBuildFPToSI (* * * char*) -> *)
(extern LLVMBuildFPExt (* * * char*) -> *)
(extern LLVMBuildIntToPtr (* * * char*) -> *)
(extern LLVMBuildPtrToInt (* * * char*) -> *)
(extern LLVMBuildSelect (* * * * char*) -> *)
(extern LLVMBuildCall (* * array uint char*) -> *)
(defun llvm-build-call (builder func args name)
  ;(format true "(l-b-c ... ~)" name)
  (LLVMBuildCall builder func args (length args) name))
(extern LLVMBuildGEP (* * array uint char*) -> *)
(extern LLVMBuildStructGEP (* * uint char*) -> *)
(extern LLVMBuildBr (* *) -> *)
(extern LLVMBuildCondBr (* * * *) -> *)
(extern LLVMBuildPhi (* * char*) -> *)
(extern LLVMBuildStore (* * *) -> *)
(extern LLVMBuildLoad (* * char*) -> *)
(extern LLVMBuildAlloca (* * char*) -> *)
(extern LLVMBuildGlobalString (* char* char*) -> *)
(extern LLVMBuildRetVoid (*) -> *)
(extern LLVMBuildRet (* *) -> *)

(extern LLVMBuildICmp (* uint * * char*) -> *)
(cenum
  (LLVMIntEQ 32)
  LLVMIntNE
  LLVMIntUGT
  LLVMIntUGE
  LLVMIntULT
  LLVMIntULE
  LLVMIntSGT
  LLVMIntSGE
  LLVMIntSLT
  LLVMIntSLE)

(extern LLVMBuildFCmp (* uint * * char*) -> *)
(cenum
  LLVMRealPredicateFalse
  LLVMRealOEQ
  LLVMRealOGT
  LLVMRealOGE
  LLVMRealOLT
  LLVMRealOLE
  LLVMRealONE
  LLVMRealORD
  LLVMRealUNO
  LLVMRealUEQ
  LLVMRealUGT
  LLVMRealUGE
  LLVMRealULT
  LLVMRealULE
  LLVMRealUNE
  LLVMRealPredicateTrue)

(extern LLVMSetValueName (* char*) -> void)
(extern LLVMDumpValue (*) -> void)
(cenum
  LLVMAbortProcessAction
  LLVMPrintMessageAction
  LLVMReturnStatusAction)
(extern LLVMVerifyModule (* uint *) -> bool)
(extern LLVMVerifyFunction (* uint) -> bool)


(extern LLVMGetFirstParam (*) -> *)
(extern LLVMGetNextParam (*) -> *)
(extern LLVMCountParams (*) -> uint)

(defun llvm-params (func)
  (let ((first-param (LLVMGetFirstParam func)))
    (if (null? first-param)
      nil
      (let ((list-head (cons first-param nil)))
        (%llvm-params func list-head)
        list-head))))

(defun %llvm-params (func list-head)
  (let ((param (LLVMGetNextParam (car list-head))))
    (unless (null? param)
      (set-cdr list-head (cons param nil))
      (%llvm-params func (cdr list-head)))))

(defun llvm-phi (builder phi-type pairs)
  (let ((phi (LLVMBuildPhi builder phi-type "")))
    (LLVMAddIncoming phi (map car pairs) (map cdr pairs) (length pairs))
    phi))
