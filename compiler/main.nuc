;;; TODO: including a directory should look for 'lib' inside it
(include "llvm/lib")

;;; TODO: Currently we have to put "constants" before "builtins", as there are
;;; some static initializers in "builtins" that depend on variables in
;;; "constants", and we don't figure out dependencies and order the
;;; initializers appropriately. This shouldn't be necessary later.
(include "constants")
(include "types")
(include "builtins")
(include "compile")
(include "functions")
(include "generics")

(defvar $module)
(defvar $builder)

(defvar $output-debug-info)
(defvar $ignore-annotations)

(defun parse-args (args)
  (let ((parsed (%parse-args args (list nil))))
    (cons (reverse (car parsed)) (cdr parsed))))

(defun %parse-args (args acc)
  (if (nil? args)
    acc
    (let ((arg (first args)))
      (cond
        ((any? (lambda (s) (string-eq? s arg))
               '("-ir" "-asm" "-d" "-O" "-u" "-no-struct-info" "-time-sections"))
         (set-cdr acc (cons (cons arg true) (cdr acc))))
        ((string-eq? arg "-link")
         (when (nil? (cdr args)) (panic! "'-link' must be followed by linker args"))
         (set-cdr acc (cons (cons arg (second args)) (cdr acc)))
         (set args (cdr args)))
        (true
          (set-car acc (cons arg (car acc)))))
      (%parse-args (cdr args) acc))))

(defun get-arg (args arg-name default)
  (cond ((nil? args) default)
        ((string-eq? (car (first args)) arg-name) (cdr (first args)))
        (true (get-arg (rest args) arg-name default))))

(defun main ()
  (cond
    ((not (length-is? $argv 1))
     (set $builder (LLVMCreateBuilder))
     (let* ((nucc-dir (dirname (ensure-absolute (first $argv) (current-dir))))
            (stdlib-same-dir (join-path nucc-dir "stdlib/lib.nuc"))
            (stdlib-parent-dir (join-path (join-path nucc-dir "..") "stdlib/lib.nuc"))
            (parsed-args (parse-args (rest $argv)))
            (non-flag-args (car parsed-args))
            (output-llvm-ir (get-arg parsed-args "-ir" false))
            (output-asm (get-arg parsed-args "-asm" false))
            (do-optimisation (get-arg parsed-args "-O" false))
            (emit-struct-info (not (get-arg parsed-args "-no-struct-info" false)))
            (time-sections (get-arg parsed-args "-time-sections" false))
            (linker-args (string-split (get-arg parsed-args "-link" "") (list 10 32))))
       (set $output-debug-info (get-arg parsed-args "-d" false))
       (set $ignore-annotations (get-arg parsed-args "-u" false))
       (when (and output-llvm-ir output-asm)
         (panic! "Cannot specify both of '-ir' and '-asm'"))
       (let* ((input-filename (ensure-absolute (first non-flag-args) (current-dir)))
              (output-filename (if (length-is? non-flag-args 1)
                                 "a.out"
                                 (second non-flag-args)))
              (llvm-context (LLVMGetGlobalContext))
              ;; This description string is cribbed from the x86_64 target in
              ;; clang, because there is zero documentation (that I can find)
              ;; on the format of target description strings, or anything
              ;; provided for common architectures.
              (target-data (LLVMCreateTargetData
                             "e-m:e-i64:64-f80:128-n8:16:32:64-S128"))
              (context
                (Context (copy-list $constants) "" nil emit-struct-info
                         target-data nil))
              (remaining-forms nil))
         (set $module (LLVMModuleCreateWithNameInContext
                        input-filename llvm-context))
         (timepoint "Initialise LLVM")
         (set remaining-forms
              (process-toplevel-form-phase1
                context 
                (dummy-token (map dummy-token '(defvar $status-code 0)))
                remaining-forms))
         ;; TODO: we should have a flag to not include the standard library, and
         ;; then enable it on all tests that don't need standard library functions.
         ;; That way, if the standard library is broken, only the tests that
         ;; actually use it break.
         (set remaining-forms
              (process-file-phase1 context remaining-forms $dummy-source-loc
                                   (list stdlib-same-dir stdlib-parent-dir)))
         (set remaining-forms
              (process-file-phase1 context remaining-forms $dummy-source-loc
                                   (list input-filename)))
         (timepoint "Phase 1")
         ;; TODO: Disable this with a flag. We'll still need to generate
         ;; something under the symbol so we don't get link errors, and give
         ;; the runtime some way to fall back when type info isn't available.
         (generate-type-table context)
         (each (lambda (form)
                 (process-toplevel-form-phase2 context form))
               remaining-forms)
         (timepoint "Phase 2")
         (each (lambda (f) (compile-function context (cdr f))) $functions)
         (timepoint "Compile functions")
         (let ((entry-point (LLVMGetNamedFunction
                              $module (mangle-name 'main)))
               (main-func (declare-function "main" INT
                                            (list INT (LLVMPointerType CHAR* 0)))))
           (when (null? entry-point)
             (panic! "No main function defined."))
           (LLVMPositionBuilderAtEnd $builder
                                     (LLVMAppendBasicBlock main-func "entry"))
           ;; Store args in $argv
           (llvm-build-call
             $builder
             (runtime-func "rt_store_argv" VOID (list INT (LLVMPointerType CHAR* 0)))
             (llvm-params main-func) "")
           (each (lambda (init)
                   (let ((var (car init))
                         (expr (cdr init)))
                     ;; TODO: statically typed globals
                     (LLVMBuildStore
                       $builder
                       (tv (coerce context (compile-expr context expr) '?
                                   (Token.source-loc expr)))
                       var)))
                 (reverse $initialisers))
           (llvm-build-call $builder entry-point nil "")
           (LLVMBuildRet
             $builder
             (LLVMBuildIntCast
               $builder
               (LLVMBuildLShr
                 $builder
                 (LLVMBuildLoad
                   $builder (tv (Binding.term (get-binding context '$status-code))) "")
                 (llvm-i64<-int LOWTAG-BITS)
                 "")
               INT
               "truncate-status-code")))
         (timepoint "Compile static initialisers")
         (when (LLVMVerifyModule $module LLVMPrintMessageAction NULL)
           (LLVMDumpModule $module)
           (fail! context
                  "ICE: Module failed LLVMVerifyModule. Module has been dumped"
                  $dummy-source-loc
                  nil false))
         (timepoint "Verify module")
         (cond
           ((not (nil? (Context.errors context)))
            (set $status-code 1)
            (format $stderr "~ error(s) generated:" (length (Context.errors context)))
            (write-string-ln-to-stream $stderr "")
            (each (lambda (err)
                    (let* ((source-loc (Error.source-loc err))
                           (filename (Source-loc.source-name source-loc))
                           (filename-to-report
                             (if (absolute-path? filename)
                               (let ((str (string-strip-prefix
                                            filename (dirname filename))))
                                 (substring str 1 (string-length str)))
                               filename)))
                      (write-string-to-stream $stderr filename-to-report)
                      (format $stderr ":~:~ "
                              (Source-loc.line source-loc)
                              (Source-loc.col source-loc))
                      (write-string-to-stream $stderr "in ")
                      (write-string-to-stream $stderr (Error.source-context err))
                      (write-string-ln-to-stream $stderr ":")
                      (write-string-to-stream $stderr "    ")
                      (write-string-ln-to-stream $stderr (Error.message err))
                      (write-string-ln-to-stream $stderr "")))
                  (reverse (Context.errors context))))
           (true
             ;; TODO: not portable
             (let ((tmp-bc-file (format nil "/tmp/~.bc" (random)))
                   (tmp-o-file (format nil "/tmp/~.o" (random))))
               (LLVMWriteBitcodeToFile $module tmp-bc-file)
               (timepoint "Write bitcode")
               (cond
                 (output-llvm-ir
                   (let ((llvm-dis-success
                           (zero? (exec "llvm-dis"
                                        (list tmp-bc-file "-o" output-filename)))))
                     ;; TODO: Don't fork just to remove a file...
                     (exec "rm" (list tmp-bc-file))
                     (unless llvm-dis-success
                       (panic! "llvm-dis failed"))))
                 (output-asm
                   (let ((llc-success (zero? (exec "llc"
                                                   (list tmp-bc-file "-filetype=asm"
                                                         "-o" output-filename)))))
                     (exec "rm" (list tmp-bc-file))
                     (unless llc-success
                       (panic! "llc failed"))))
                 (true
                   ;; TODO: A more intelligent way of finding the runtime
                   (unless (zero? (exec "llvm-link" (list tmp-bc-file
                                                          "runtime/nuc-runtime.bc"
                                                          "-o" tmp-bc-file)))
                     (exec "rm" (list tmp-bc-file))
                     (panic! "llvm-link failed"))
                   (timepoint "Link in runtime")
                   ;; TODO: Set up a customised optimisation pipeline. We run
                   ;; -Oz first here as that seems to be necessary to get LLVM
                   ;; to optimise tail calls, but this is a stopgap solution.
                   (when do-optimisation
                     (unless (zero? (exec "opt" (list tmp-bc-file "-Oz" "-o" tmp-bc-file)))
                       (exec "rm" (list tmp-bc-file))
                       (panic! "opt failed"))
                     (timepoint "opt -Oz")
                     (unless (zero? (exec "opt" (list tmp-bc-file "-O3" "-o" tmp-bc-file)))
                       (exec "rm" (list tmp-bc-file))
                       (panic! "opt failed"))
                     (timepoint "opt -O3"))
                   (unless (zero? (exec "llc" (append
                                                (if do-optimisation '("-O3") nil)
                                                (list tmp-bc-file "-filetype=obj"
                                                      "-o" tmp-o-file))))
                     (exec "rm" (list tmp-bc-file))
                     (panic! "llc failed"))
                   (timepoint "llc")
                   (unless (zero? (exec "g++" (append (list "-lm"
                                                            tmp-o-file
                                                            "-o" output-filename)
                                                      linker-args)))
                     (exec "rm" (list tmp-bc-file tmp-o-file))
                     (panic! "g++ failed"))
                   (timepoint "Final link")
                   (exec "rm" (list tmp-bc-file tmp-o-file))))))))
       (when time-sections
         (write-string-ln "(times in ms)")
         (each (lambda (msg-and-time)
                 (let ((msg (car msg-and-time))
                       (time (cdr msg-and-time)))
                   (print (/ time 1000000))
                   (write-char 9) ; \t
                   (write-string-ln msg)))
               (reverse $timepoints)))))
    (true
      (write-string-ln "Usage: nucc <input filename>"))))

(defun process-file-phase1 ((context Context) remaining-forms source-loc
                                              filename-and-backups)
  (let ((filename (first filename-and-backups)))
    (when $output-debug-info (format true "Processing file '~'" filename))
    (cond
      ((file-exists? filename)
       (let ((old-file (Context.file context)))
         (Context.file= context filename)
         (let* ((file (open filename))
                (forms (read-all-with-source-loc file)))
           (close file)
           (each (lambda (form)
                   (set remaining-forms
                        (process-toplevel-form-phase1 context form remaining-forms)))
                 forms))
         (Context.file= context old-file))
       remaining-forms)
      ((nil? (cdr filename-and-backups))
       (fail! context
              (format nil "Could not find file ~" filename)
              source-loc
              nil false)
       remaining-forms)
      (true (process-file-phase1 context remaining-forms
                                 source-loc (rest filename-and-backups))))))

(defvar $timepoints nil)
(defvar $last-timepoint (nanoseconds))
(defun timepoint (description)
  (let* ((current-time (nanoseconds))
         (diff (- current-time $last-timepoint)))
    (set $last-timepoint current-time)
    (set $timepoints (cons (cons description diff) $timepoints))))
