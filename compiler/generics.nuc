;;; TODO: Replace with a struct once they exist
(defun make-generic-func (name arity arg-names arg-types return-type body existing-impls)
  (list name arity arg-names arg-types return-type body existing-impls))
(defun generic-func-name (func) (first func))
(defun generic-func-arity (func) (second func))
(defun generic-func-arg-names (func) (third func))
(defun generic-func-arg-types (func) (fourth func))
(defun generic-func-return-type (func) (fifth func))
(defun generic-func-body (func) (sixth func))
(defun generic-func-existing-impls (func) (seventh func))
(defun generic-func-add-impl (func impl-arg-types impl-ret-type impl)
  (set-car (cddr (cddddr func))
           (cons (cons (cons impl-ret-type impl-arg-types) impl)
                 (generic-func-existing-impls func))))

;;; TODO: Replace with a hash table once that exists
;;; TODO: This should go in the context, along with $module and $builder
(defvar $generic-functions nil)

(defun add-generic-func ((context Context) name arg-names arg-types return-type
                                 return-type-source-loc body)
  (when $output-debug-info (format true "Adding generic func ~" name))
  (let* ((arity (length arg-names))
         (generic-func (make-generic-func name arity arg-names
                                          arg-types return-type body nil))
         (dynamic-arg-types (map (lambda (arg-type)
                                   (if (generic-type? arg-type) '? arg-type))
                                 arg-types)))
    (if (and (generic-type? return-type)
             (not (member? return-type arg-types)))
      (fail! context
             (format nil "Generic return type ~ must be constrained by generic argument types" return-type)
             return-type-source-loc
             nil false)
      ;; By the gradual guarantee, if the function fails to compile when all of
      ;; the type variables are replaced with '?', it will fail with *any*
      ;; concrete type. If that is the case, we know not to bother creating any
      ;; other versions, and we can just issue one error message. To do this,
      ;; we create a dummy non-generic version with a signature with all
      ;; variables replaced with '?'.
      ;;
      ;; This is nice because we can still get type errors for any non-dynamic
      ;; concrete types in the signature even if the function itself failed to
      ;; compile. We also set its impl-type to 'extern', so that we don't
      ;; bother to compile this non-generic version. It doesn't matter that it
      ;; doesn't exist, as we'll fail before link time.
      ;;
      ;; TODO: We can't do the above yet, as we can't compile functions until
      ;; we have processed the entire compilation unit. We need to delay it
      ;; somehow, while still making sure it happens before any other functions
      ;; are compiled, so that they refer to the non-generic version if it
      ;; fails.
      (set $generic-functions (cons (cons name generic-func) $generic-functions)))))

(defun get-generic-func (name) (assoc-cdr name $generic-functions))

(defun generic-type? (type-spec)
  ;; TODO: Support compound types containing type variables
  (and (not (cons? type-spec))
       (eq? (char-at (string<-symbol type-spec) 0) 36))) ; 36 = '$'

(defun get-generic-func-specialization
  ((context Context) generic-func concrete-arg-types
                     concrete-ret-type blame-source-loc)
  (let ((existing (find (lambda (pair)
                          (let ((arg-types (car pair))
                                (impl (cdr pair)))
                            (all? (lambda (c)
                                    (type-eq? (car c) (cdr c)))
                                  (zip arg-types concrete-arg-types))))
                        (generic-func-existing-impls generic-func))))
    (cond
      ((not (nil? existing))
       (cdr existing))
      ((not (generic-func-compatible? generic-func concrete-arg-types))
       (fail! context
              (format nil "Incompatible types to generic function ~"
                      (generic-func-name generic-func))
              blame-source-loc
              nil false)
       (declare-function "(dummy)" (concrete-ret-type generic-func)
                         concrete-arg-types))
      (true
        (let ((new-impl (compile-generic-function-impl
                          context generic-func concrete-arg-types
                          concrete-ret-type)))
          (generic-func-add-impl generic-func concrete-arg-types
                                 concrete-ret-type new-impl)
          new-impl)))))

(defun generic-func-compatible? (generic-func concrete-arg-types)
  (all? (lambda (c)
          (let ((desired-type (car c))
                (actual-type (cdr c)))
            (or (generic-type? desired-type)
                (type-eq? desired-type actual-type))))
        (zip (generic-func-arg-types generic-func) concrete-arg-types)))

(defun get-concrete-types ((context Context) generic-func arg-terms)
  (let* ((type-var-map nil)
         (concrete-arg-types
           (map2 (lambda (func-arg-type arg-term)
                   (if (generic-type? func-arg-type)
                     (let ((already-found (assoc-cdr func-arg-type type-var-map)))
                       (if (not (nil? already-found))
                         already-found
                         (let ((t (tt arg-term)))
                           (set type-var-map (cons (cons func-arg-type t) type-var-map))
                           t)))
                     ;; Don't bother checking if they match, as the coercion will get
                     ;; that later anyway.
                     func-arg-type))
                 (generic-func-arg-types generic-func)
                 arg-terms))
         (ret-type (generic-func-return-type generic-func))
         (concrete-ret-type
           (if (generic-type? ret-type)
             (let ((already-found (assoc-cdr ret-type type-var-map)))
               (assert! (not (nil? already-found))
                        "The return type is a type variable and is not constrained by argument type variables. Should have detected this when processing the function declaration")
               already-found)
             ret-type)))
    (cons concrete-ret-type concrete-arg-types)))

(defun mangle-generic-func-name (name concrete-arg-types concrete-ret-type)
  (format nil "nuc-generic(~$~->~)" name concrete-arg-types concrete-ret-type))

(defun compile-generic-function-impl ((context Context) generic-func concrete-arg-types
                                                        concrete-ret-type)
  (when $output-debug-info
    (format true "(c-g-f-i ... ~ ~ ~)"
            generic-func concrete-arg-types concrete-ret-type))
  ;; TODO: change context-func to a string, so we can set from here
  (let ((llvm-func (declare-function
                     (mangle-generic-func-name
                       (generic-func-name generic-func) concrete-arg-types concrete-ret-type)
                     (llvm-type<-type-spec context concrete-ret-type)
                     (map (lambda (t) (llvm-type<-type-spec context t))
                          concrete-arg-types))))
    (%compile-function
      context
      (generic-func-arg-names generic-func)
      concrete-arg-types
      concrete-ret-type
      (generic-func-body generic-func)
      llvm-func)
    llvm-func))
