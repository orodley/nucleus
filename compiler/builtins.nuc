(defvar $builtin-functions
  (list
    (cons 'float builtin-float)
    (cons 'int builtin-int)
    (cons '+ builtin+)
    (cons '- builtin-)
    (cons '* builtin*)
    (cons '% builtin%)
    (cons '/ builtin/)
    (cons 'cons builtin-cons)
    (cons 'scons builtin-scons)
    (cons 'set-car builtin-set-car)
    (cons 'set-cdr builtin-set-cdr)
    (cons 'car builtin-car)
    (cons 'cdr builtin-cdr)
    (cons 'eq? builtin-eq?)
    ;; TODO: these should be variable arity. maybe a macro which expands into
    ;; the binary version?
    (cons '< builtin-<)
    (cons '<= builtin-<=)
    (cons '> builtin->)
    (cons '>= builtin->=)))
(defvar $special-forms
  (list
    (cons 'set special-form-set)
    (cons 'let special-form-let)
    (cons 'progn special-form-progn)
    (cons 'if special-form-if)
    (cons 'quote special-form-quote)
    (cons 'lambda special-form-lambda)))
(defvar $builtin-macros ;; TODO: should be in the stdlib
  (list
    (cons 'let* builtin-macro-let*)
    (cons 'cond builtin-macro-cond)
    (cons 'case builtin-macro-case)
    (cons 'and builtin-macro-and)
    (cons 'or builtin-macro-or)
    (cons 'when builtin-macro-when)
    (cons 'unless builtin-macro-unless)
    ;; TODO: these should just be regular functions once we have varargs
    (cons 'format builtin-macro-format)
    (cons 'list builtin-macro-list)
    (cons 'slist builtin-macro-slist)))
;; TODO: Write these as more readable constant expressions
;; TODO: Maybe these should have different names to indicate that this
;; representation is only used when they are dynamic values?

;; nil is just a null cons pointer, so the dynamic version is just the cons
;; lowtag.
(defvar LLVM-NIL (llvm-i64<-int CONS-LOWTAG))
(defvar LLVM-NULL-CONS (LLVMConstNull CONS-CELL-PTR))
(defvar NIL-TERM (make-term 'cons LLVM-NULL-CONS false))

(defvar LLVM-TRUE (llvm-i64<-int 263))
(defvar LLVM-FALSE (llvm-i64<-int 519))
(defvar LLVM-FIXNUM-T (llvm-i64<-int 775))
(defvar LLVM-CONS-T (llvm-i64<-int 1031))
(defvar LLVM-BOOL-T (llvm-i64<-int 1543))
(defvar LLVM-FLOAT-T (llvm-i64<-int 1799))
(defvar LLVM-SYMBOL-T (llvm-i64<-int 2055))
(defvar LLVM-FOREIGN-T (llvm-i64<-int 2311))
(defvar LLVM-STRING-T (llvm-i64<-int 2567))
(defvar LLVM-LAMBDA-T (llvm-i64<-int 2823))
;; TODO: these should all have static types
(defvar $constants
  (list
    (make-constant 'nil LLVM-NULL-CONS 'cons)
    (make-constant 'true (llvm-i32<-int 1) 'bool)
    (make-constant 'false (llvm-i32<-int 0) 'bool)
    (make-constant 'fixnum-t LLVM-FIXNUM-T '?)
    (make-constant 'cons-t LLVM-CONS-T '?)
    (make-constant 'bool-t LLVM-BOOL-T '?)
    (make-constant 'float-t LLVM-FLOAT-T '?)
    (make-constant 'symbol-t LLVM-SYMBOL-T '?)
    (make-constant 'foreign-t LLVM-FOREIGN-T '?)
    (make-constant 'string-t LLVM-STRING-T '?)
    (make-constant 'lambda-t LLVM-LAMBDA-T '?)))

(defun get-special-form (name) (assoc-cdr name $special-forms))
(defun get-builtin-function (name) (assoc-cdr name $builtin-functions))
(defun get-builtin-macro (name) (assoc-cdr name $builtin-macros))

(defun special-form-set (context args)
  (let* ((env (context-env context))
         (name (first args))
         (binding (get-binding context (ts name)))
         (new-value (compile-expr context (second args))))
    (cond
      ((nil? binding)
       (fail! context
              (format nil "Undefined variable '~'" (ts name))
              (token-source-loc name)
              (tt new-value) false))
      ((not (binding-lvalue? binding))
       (fail! context
              (format nil "Cannot assign to constant '~'" (ts name))
              (token-source-loc name)
              (tt new-value) false))
      (true (LLVMBuildStore $builder
                            (tv (coerce context new-value
                                        (tt (binding-term binding))
                                        ;; TODO: source loc
                                        $dummy-source-loc))
                            (tv (binding-term binding)))))
    new-value))

(defun special-form-let (context args)
  ;; TODO: better error reporting for malformed 'let' forms
  ;; TODO: optional type annotations for 'let' variables
  (let* ((clauses (ts (first args)))
         (body (rest args))
         (names (map (lambda (clause) (first (ts clause))) clauses))
         (terms (map (lambda (clause)
                       (compile-expr context (second (ts clause))))
                      clauses))
         (original-env (context-env context)))
    (extend-env-with-terms context names terms)
    (let ((let-term (compile-progn context body)))
      (context-set-env context original-env)
      let-term)))

(defun builtin-macro-let* (context args)
  ;; TODO: Life without quasiquote is painful
  (if (nil? (ts (first args)))
    (cons (dummy-token 'progn) (rest args))
    (list
      (dummy-token 'let)
      (dummy-token (list (car (ts (first args)))))
      (dummy-token (cons (dummy-token 'let*)
                         (cons (dummy-token (cdr (ts (first args))))
                               (rest args)))))))

(defun special-form-progn (context args)
  (compile-progn context args))

;;; TODO: It would be nice if we knew in advance whether the result is actually
;;; used, so that we can omit potentially costly conversions to make both
;;; branches the same type.
(defun special-form-if (context args)
  (let* ((condition (coerce context (compile-expr context (first args)) 'bool
                            (token-source-loc (first args))))
         (start-block (LLVMGetInsertBlock $builder))
         (then-token (second args))
         ;; TODO: maybe during the 'macroexpansion' pass we insert missing
         ;; else branches? We could perhaps do some other things too, like what
         ;; GHC does with desugaring into 'Core'.
         (else-token (if (length-is? args 2) (dummy-token 'nil) (third args)))
         (current-func (get-current-func $builder))
         (then-block (LLVMAppendBasicBlock current-func "then"))
         (else-block (LLVMAppendBasicBlock current-func "else"))
         (after-block (LLVMAppendBasicBlock current-func "after")))
    (LLVMBuildCondBr
      $builder
      (LLVMBuildIntCast $builder (tv condition) (LLVMIntType 1) "")
      then-block else-block)
    (let* ((then-term (compile-in-block context then-token then-block))
           (then-resultant-block (LLVMGetInsertBlock $builder))
           (else-term (compile-in-block context else-token else-block))
           (else-resultant-block (LLVMGetInsertBlock $builder))
           (then-type (expand-type (tt then-term)))
           (else-type (expand-type (tt else-term)))
           (result-type
             (cond
               ((type-eq? then-type else-type)
                then-type)
               ((and (cons-type? then-type) (cons-type? else-type))
                '(cons ? ?))
               ;; TODO: If both types are different static types then we need a
               ;; dynamic value, but we shouldn't just throw away the static
               ;; type information - we should keep it as a union type and do
               ;; static type checking based on that. For example:
               ;;  (car (if foo "" false))
               ;; should be able to be detected as a static type error, as the
               ;; type of the argument of car is 'cons' (or (cons A B) once we
               ;; have a proper cons type), which is disjoint from the type of
               ;; the if expression, (or string bool).
               (true '?))))
      (cond
        ((or (not (LLVMIsConstant (tv condition)))
             (LLVMIsUndef (tv condition)))
         ;; We wait until here to do this, because if the condition is constant
         ;; we do an unconditional branch.
         (let* ((then-term (%build-branch context then-term result-type
                                          then-resultant-block after-block))
                ;; We need to recompute the resultant blocks in this case,
                ;; because '%build-branch' does a 'coerce', which can add
                ;; additional basic blocks.
                (then-resultant-block (LLVMGetInsertBlock $builder))
                (else-term (%build-branch context else-term result-type
                                          else-resultant-block after-block))
                (else-resultant-block (LLVMGetInsertBlock $builder)))
           (LLVMPositionBuilderAtEnd $builder after-block)
           (make-term
             result-type
             ;; TODO: maybe llvm-phi should just figure out the result type itself
             ;; based on the the given terms and do the coercions itself.
             (llvm-phi $builder (llvm-type<-type-spec context result-type)
                       (list (cons (tv then-term) then-resultant-block)
                             (cons (tv else-term) else-resultant-block))
                       "if-non-constant")
             false)))
        ;; If we detect that the condition is constant, we can tell more about
        ;; the result type. We could also remove the other branch, but LLVM
        ;; will do that for us anyway.  We could save time by not compiling it
        ;; in the first place, but then we don't get errors.  We have to do
        ;; this here rather than when we first determine result-type so that
        ;; the coercion for the omitted branch still works.  We also need to
        ;; set then-term or else-term so that the phi node has something of the
        ;; correct type.
        ((eq? (LLVMConstIntGetSExtValue (tv condition)) 0)
         (link-blocks $builder then-resultant-block after-block)
         (link-blocks $builder else-resultant-block after-block)
         (LLVMPositionBuilderAtEnd $builder after-block)
         (let ((t (llvm-type<-type-spec context else-type)))
           (make-term else-type
                      (llvm-phi $builder t
                                (list (cons (LLVMGetUndef t) then-resultant-block)
                                      (cons (tv else-term) else-resultant-block))
                                "if-constant-false")
                      false)))
        ((eq? (LLVMConstIntGetSExtValue (tv condition)) 1)
         (link-blocks $builder then-resultant-block after-block)
         (link-blocks $builder else-resultant-block after-block)
         (LLVMPositionBuilderAtEnd $builder after-block)
         (let ((t (llvm-type<-type-spec context then-type)))
           (make-term then-type
                      (llvm-phi $builder t
                                (list (cons (tv then-term) then-resultant-block)
                                      (cons (LLVMGetUndef t) else-resultant-block))
                                "if-constant-true")
                      false)))))))

(defun compile-in-block (context expr block)
  (LLVMPositionBuilderAtEnd $builder block)
  (compile-expr context expr))

(defun link-blocks (builder pred succ)
  (LLVMPositionBuilderAtEnd $builder pred)
  (LLVMBuildBr $builder succ))

(defun %build-branch (context term typ branch-block after-block)
  ;; We need to call 'coerce' while the builder is in the same block as the
  ;; value we are calling it on, otherwise the type coercion code is inserted
  ;; into the wrong place. However, we only know what type to coerce into after
  ;; we have already compiled both branches, so we have to go back into the
  ;; block.
  (LLVMPositionBuilderAtEnd $builder branch-block)
  ;; TODO: source loc
  (let ((result (coerce context term typ $dummy-source-loc)))
    (LLVMBuildBr $builder after-block)
    result))

(defun builtin-macro-cond (context clauses)
  (if (nil? clauses)
    'nil
    ;; TODO: Life without quasiquote is painful
    (list (dummy-token 'if)
          (car (ts (car clauses)))
          (dummy-token (cons (dummy-token 'progn) (cdr (ts (car clauses)))))
          (dummy-token (cons (dummy-token 'cond) (cdr clauses))))))

(defun builtin-macro-case (context args)
  (let ((expr (first args))
        (clauses (rest args))
        (case-sym (dummy-token (gensym))))
    ;; TODO: Life without quasiquote is painful
    (map dummy-token
         (list 'let
               (list (dummy-token (list case-sym expr)))
               (cons (dummy-token 'cond)
                     (map (lambda (clause)
                            (dummy-token
                              (cons (dummy-token
                                      (if (eq? (ts (first (ts clause))) 'default)
                                        'true
                                        (list (dummy-token 'eq?)
                                              case-sym
                                              (first (ts clause)))))
                                    (rest (ts clause)))))
                          clauses))))))

(defun special-form-quote (context args)
  (let ((to-quote (first args)))
    (case (type (ts to-quote))
      (fixnum-t (compile-expr context to-quote))
      (cons-t (if (nil? (ts to-quote))
                ;; This case never comes up directly from source, as 'nil' is
                ;; read in as the symbol 'nil' not the constant. It only comes
                ;; up in the recursive case below when quoting a cons.
                NIL-TERM
                (compile-expr
                  context
                  (dummy-token
                    (map dummy-token
                         (list 'cons
                               (list (dummy-token 'quote)
                                     (car (ts to-quote)))
                               (list (dummy-token 'quote)
                                     (dummy-token (cdr (ts to-quote))))))))))
      (symbol-t (make-term
                  'symbol
                  (llvm-build-call
                    $builder
                    (runtime-func "rt_intern_symbol"
                                  (llvm-type<-type-spec context 'symbol)
                                  (list CHAR*))
                    (list (global-string (string<-symbol (ts to-quote))))
                    "intern-const")
                  false))
      (default (fail! context
                      (format nil "Don't know how to quote '~'" (ts to-quote))
                      (token-source-loc to-quote)
                      '? false)))))

(defun builtin-macro-and (context operands)
  (if (nil? operands)
    'true
    (let ((operand-sym (dummy-token (gensym))))
      ;; TODO: Life without quasiquote is painful
      (map dummy-token
           (list 'let
                 (list (dummy-token (list operand-sym (first operands))))
                 (list (dummy-token 'if)
                       operand-sym
                       (dummy-token (cons (dummy-token 'and) (rest operands)))
                       (dummy-token 'false)))))))

(defun builtin-macro-or (context operands)
  (if (nil? operands)
    'false
    (let ((operand-sym (dummy-token (gensym))))
      ;; TODO: Life without quasiquote is painful
      (map dummy-token
           (list 'let
                 (list (dummy-token (list operand-sym (first operands))))
                 (list (dummy-token 'if)
                       operand-sym
                       (dummy-token 'true)
                       (dummy-token (cons (dummy-token 'or) (rest operands)))))))))

;;; TODO: Detect lambdas with identical bodies and use the same function.
;;; We'd also need to keep track if any errors were found when compiling the
;;; other lambda and generate the same error (once we're doing errors properly).
;;; TODO: We should mangle lambda names differently - at the moment if you call
;;; a function 'lambda_0' or something it will conflict.

(defvar $lambda-counter 0)
(defun special-form-lambda (context args-and-body)
  (let* ((args (car args-and-body))
         (body (cdr args-and-body))
         (name (symbol<-string
                 (format nil "lambda_~" (set $lambda-counter
                                             (+ 1 $lambda-counter)))))
         (current-block (LLVMGetInsertBlock $builder))
         (captures (find-captured-vars context body (map ts (ts args))))
         ;; TODO: We should really give the source location of the 'lambda' or
         ;; of the opening bracket, not of the arg list. This would require
         ;; passing this source location through to all special forms though,
         ;; which would mean changing the convention for functions implementing
         ;; special forms.
         (func (compile-lambda context (token-source-loc args) name args body captures))
         (arity (length (ts args))))
    ;; compile-lambda will change the builders position.
    (LLVMPositionBuilderAtEnd $builder current-block)
    ;; TODO: allow type annotations for lambdas, don't just use ?
    (make-lambda context func (repeat arity '?) '? captures)))

(defun builtin-macro-format (context args)
  ;; TODO: Life without quasiquote is painful
  (list (dummy-token '%format) (first args) (second args)
        (dummy-token (cons (dummy-token 'list) (cddr args)))))

(defun builtin-macro-list/slist (context args s?list s?cons)
  (if (nil? args)
    'nil
    ;; TODO: Life without quasiquote is painful
    (list (dummy-token s?cons)
          (first args)
          (dummy-token (cons (dummy-token s?list) (rest args))))))

(defun builtin-macro-list (context args)
  (builtin-macro-list/slist context args 'list 'cons))

(defun builtin-macro-slist (context args)
  (builtin-macro-list/slist context args 'slist 'scons))

(defun builtin-macro-unless (context args)
  (let ((condition (first args))
        (body (rest args)))
    ;; TODO: Life without quasiquote is painful
    (list
      (dummy-token 'if)
      condition
      (dummy-token 'nil)
      (dummy-token (cons (dummy-token 'progn) body)))))

(defun builtin-macro-when (context args)
  (let ((condition (first args))
        (body (rest args)))
    ;; TODO: Life without quasiquote is painful
    (list
      (dummy-token 'if)
      condition
      (dummy-token (cons (dummy-token 'progn) body)))))


;;; TODO: We don't need to bother removing the lowtag for some of these numeric
;;; functions when both are dynamic. Maybe we should come up with a nice way of
;;; enabling this kind of optimisation. Unless LLVM just figures it out
;;; automatically anyway.

(defun builtin-float (context args)
  (make-term
    'float
    ;; TODO: source loc
    (implicit-conversion
      context
      (coerce context (first args) 'int $dummy-source-loc)
      'float
      $dummy-source-loc)
    false))
(defun builtin-int (context args)
  (make-term
    'int
    ;; TODO: source loc
    (implicit-conversion
      context
      (coerce context (first args) 'float $dummy-source-loc)
      'int
      $dummy-source-loc)
    false))

(defun comparison (context cmp int-cmp float-cmp operands)
  (unless (length-is? operands 2)
    (fail! context
           (format nil "~ can only take two operands" cmp)
           ;; TODO: keep builtin arg source loc
           $dummy-source-loc
           'bool false))
  ;; TODO: source loc
  (let* ((type-and-vals (arithmetic-conversion context operands $dummy-source-loc))
         (typ (car type-and-vals))
         (vals (cdr type-and-vals)))
    (make-term
      'bool
      (LLVMBuildZExt
        $builder
        (if (floating-point? typ)
          (LLVMBuildFCmp $builder float-cmp (first vals) (second vals) cmp)
          (LLVMBuildICmp $builder int-cmp (first vals) (second vals) cmp))
        (LLVMIntType 32)
        "")
      false)))
(defun builtin-< (context args) (comparison context "<" LLVMIntSLT LLVMRealOLT args))
(defun builtin-<= (context args) (comparison context "<=" LLVMIntSLE LLVMRealOLE args))
(defun builtin-> (context args) (comparison context ">" LLVMIntSGT LLVMRealOGT args))
(defun builtin->= (context args) (comparison context ">=" LLVMIntSGE LLVMRealOGE args))

(defun arithmetic-builtin (context args int-op float-op name)
  ;; TODO: source loc
  (let* ((type-and-vals (arithmetic-conversion context args $dummy-source-loc))
         (typ (car type-and-vals))
         (vals (cdr type-and-vals))
         (op (if (floating-point? typ) float-op int-op)))
    (make-term typ (reduce (lambda (a b) (op $builder a b name)) vals) false)))
(defun builtin+ (context args)
  (arithmetic-builtin context args LLVMBuildAdd LLVMBuildFAdd "+"))
(defun builtin- (context args)
  (arithmetic-builtin context args LLVMBuildSub LLVMBuildFSub "-"))
(defun builtin* (context args)
  (arithmetic-builtin context args LLVMBuildMul LLVMBuildFMul "*"))
(defun builtin% (context args)
  (arithmetic-builtin context args LLVMBuildSRem LLVMBuildFRem "%"))
(defun builtin/ (context args)
  (arithmetic-builtin context args LLVMBuildSDiv LLVMBuildFDiv "/"))

(defun builtin-cons (context args)
  (let* ((cons-ptr (LLVMBuildBitCast $builder (gc-alloc (cons-size context))
                                     CONS-CELL-PTR ""))
         (cons-term (make-term '(cons ? ?) cons-ptr false)))
    ;; TODO: source loc
    (set-car-value cons-ptr (tv (coerce context (first args) '? $dummy-source-loc)))
    (set-cdr-value cons-ptr (tv (coerce context (second args) '? $dummy-source-loc)))
    ;; We have to set the gr flag here, because its possible we'll insert this
    ;; cons into the cdr slot of a static cons, and it will be expected to be
    ;; a static cons.
    (set-gr-value cons-ptr (llvm-i8<-int 3))
    cons-term))

(defun builtin-scons (context args)
  (let* ((type-spec (if (or
                          (and (list-type? (tt (second args)))
                               (type-eq? (tt (first args)) (car-type (tt (second args)))))
                          (and (not (type-eq? (tt (second args)) '?))
                               (LLVMIsConstant (tv (second args)))))
                      (list 'list-of (tt (first args)))
                      (list 'cons (tt (first args)) (tt (second args)))))
         (cons-ptr (LLVMBuildBitCast $builder (gc-alloc (cons-size context))
                                     CONS-CELL-PTR ""))
         (cons-term (make-term type-spec cons-ptr false)))
    (when $output-debug-info (format true "cons type = ~" type-spec))
    (set-car-value cons-ptr (i64<-term context (first args)))
    (set-cdr-value cons-ptr (i64<-term context (second args)))
    (set-gr-value cons-ptr (llvm-i8<-int 0))
    cons-term))

;;; TODO: An interesting idea is to make car and cdr return lvalues so that we
;;; can do stuff like (set (car foo) bar). Have to give it a try and see if
;;; that's a good design for generalized references. We'd also need a special
;;; type for references, and make functions choose to return references. e.g.:
;;; (defun first ((c cons)) -> (ref ?) (car c))
;;; otherwise the 'lvalueness' gets swallowed upon returning from the function.

(defun builtin-c[ad]r (context cons-term field-getter gr-getter field-type field-name)
  (when $output-debug-info
    (format true "(builtin-c[ad]r ... ~ ... ... ~ ~)"
            cons-term field-type field-name))
  (make-term
    field-type
    (if (type-eq? (tt cons-term) '(cons ? ?))
      ;; Dynamic cons - just grab the value out.
      (field-getter (tv cons-term))
      ;; Static cons - check if it's a guarded reference, and convert the value
      ;; if it is.
      ;;
      ;; TODO: Once we track known compile-time information about guarded
      ;; references, we can check that here and only branch if we don't know
      ;; what it is statically.
      (let* ((llvm-field-type (llvm-type<-type-spec context field-type))
             (raw-field-value (field-getter (tv cons-term)))
             (current-func (get-current-func $builder))
             (gr-block (LLVMAppendBasicBlock current-func "gr-cons"))
             (non-gr-block (LLVMAppendBasicBlock current-func "non-gr-cons"))
             (after-block (LLVMAppendBasicBlock current-func "after-field-access")))
        (LLVMBuildCondBr $builder (gr-getter (tv cons-term)) gr-block non-gr-block)
        (LLVMPositionBuilderAtEnd $builder gr-block)
        (let* ((coerced-field-value
                 (tv (coerce context
                             (make-term '? raw-field-value false)
                             field-type
                             ;; TODO: source loc
                             $dummy-source-loc)))
               (gr-resultant-block (LLVMGetInsertBlock $builder)))
          (LLVMBuildBr $builder after-block)
          (LLVMPositionBuilderAtEnd $builder non-gr-block)
          (let ((static-field-value (term<-i64 context raw-field-value field-type)))
            (LLVMBuildBr $builder after-block)
            (LLVMPositionBuilderAtEnd $builder after-block)
            (llvm-phi $builder llvm-field-type
                      (list (cons coerced-field-value gr-resultant-block)
                            (cons static-field-value non-gr-block))
                      field-name)))))
    false))

(defun builtin-car (context args)
  ;; TODO: source loc
  (let ((cons-term (coerce context (first args) 'cons $dummy-source-loc)))
    (builtin-c[ad]r context cons-term get-car-value get-car-gr-value
                    (car-type (tt cons-term)) "car")))

(defun builtin-cdr (context args)
  ;; TODO: source loc
  (let ((cons-term (coerce context (first args) 'cons $dummy-source-loc)))
    (builtin-c[ad]r context cons-term get-cdr-value get-cdr-gr-value
                    (cdr-type (tt cons-term)) "cdr")))

(defun builtin-set-c[ad]r (context cons-term val-term field-setter
                                   field-getter gr-getter field-type field-name)
  (cond
    ((type-eq? (tt val-term) '?)
     ;; The value we're assigning is dynamic.
     (cond
       ((type-eq? field-type '?)
        ;; The value we're assigning is dynamic and so is the field - just
        ;; stick it in, no conversions or checks necessary.
        (field-setter (tv cons-term) (tv val-term)))
       (true
         ;; The value we're assigning is dynamic but the field isn't, so we
         ;; need to first check the runtime type of the value we're assigning
         ;; and then check if this is a guarded reference. If it is, just
         ;; assign. Otherwise, convert to the correct static type first.
         ;;
         ;; TODO: Once we track known compile-time information about guarded
         ;; references, we can check that here and only branch if we don't know
         ;; what it is statically.
         ;;
         ;; TODO: This is another use case for a 'coerce' form that assumes the
         ;; runtime type is correct - we always check up front to make sure it
         ;; matches the field, so we don't need to check again once we discover
         ;; it's not a guarded reference and convert.
         (check-type (tv val-term) (type-id<-type-spec context field-type))
         (let* ((current-func (get-current-func $builder))
                (original-block (LLVMGetInsertBlock $builder))
                (non-gr-block (LLVMAppendBasicBlock current-func "non-gr-cons"))
                (after-block (LLVMAppendBasicBlock current-func "after-set-field")))
           (LLVMBuildCondBr $builder (gr-getter (tv cons-term)) after-block non-gr-block)
           (LLVMPositionBuilderAtEnd $builder non-gr-block)
           (let* ((coerced-value (i64<-term context (coerce context val-term field-type
                                                            ;; TODO: source loc
                                                            $dummy-source-loc)))
                  (non-gr-resultant-block (LLVMGetInsertBlock $builder)))
             (LLVMBuildBr $builder after-block)
             (LLVMPositionBuilderAtEnd $builder after-block)
             (field-setter (tv cons-term)
                           (llvm-phi
                             $builder NUC-VAL
                             (list (cons coerced-value non-gr-resultant-block)
                                   (cons (tv val-term) original-block))
                             "final-value")))))))
    ((type-eq? field-type '?)
     ;; The field is dynamic, but the value being assigned isn't. We convert
     ;; the static value into a dynamic value and stick it in.
     (field-setter (tv cons-term)
                   (i64<-term context (coerce context val-term field-type
                                              ;; TODO: source loc
                                              $dummy-source-loc))))
    ((not (type-eq? field-type (tt val-term)))
     ;; Wrong static type
     (fail! context
            (format nil "Static type error: tried to use a term of type '~' where '~' was expected"
                    (tt val-term) field-type)
            ;; TODO: we need to keep around source location information for all
            ;; arguments to builtin functions so we can accurately report the
            ;; location in cases of compile-time errors.
            $dummy-source-loc
            (tt val-term) false))
    (true
      ;; Correct static type, but we still don't know whether this is a guarded
      ;; reference, so we must check, and do the conversion if so.
      ;;
      ;; TODO: Once we track known compile-time information about guarded
      ;; references, we can check that here and only branch if we don't know
      ;; what it is statically.
      (let* ((current-func (get-current-func $builder))
             (original-block (LLVMGetInsertBlock $builder))
             (gr-block (LLVMAppendBasicBlock current-func "gr-cons"))
             (after-block (LLVMAppendBasicBlock current-func "after-set-field")))
        (LLVMBuildCondBr $builder (gr-getter (tv cons-term)) gr-block after-block)
        (LLVMPositionBuilderAtEnd $builder gr-block)
        (let* ((coerced-value (tv (coerce context val-term field-type
                                          ;; TODO: source loc
                                          $dummy-source-loc)))
               (gr-resultant-block (LLVMGetInsertBlock $builder)))
          (LLVMBuildBr $builder after-block)
          (LLVMPositionBuilderAtEnd $builder after-block)
          (field-setter (tv cons-term)
                        (llvm-phi
                          $builder NUC-VAL
                          (list (cons coerced-value gr-resultant-block)
                                (cons (tv val-term) original-block))
                          "final-value"))))))
  val-term)

(defun builtin-set-car (context args)
  ;; TODO: source loc
  (let ((cons-term (coerce context (first args) 'cons $dummy-source-loc)))
    (builtin-set-c[ad]r context cons-term (second args) set-car-value
                        get-car-value get-car-gr-value (car-type (tt cons-term))
                        "car")))

(defun builtin-set-cdr (context args)
  ;; TODO: source loc
  (let ((cons-term (coerce context (first args) 'cons $dummy-source-loc)))
    (builtin-set-c[ad]r context cons-term (second args) set-cdr-value
                        get-cdr-value get-cdr-gr-value (cdr-type (tt cons-term))
                        "cdr")))

(defun builtin-eq? (context args)
  (let ((term1 (first args))
        (term2 (second args)))
    (cond
      ((and (type-eq? (tt term1) '?) (type-eq? (tt term2) '?))
       ;; TODO: If we have two dynamic values that are both foreign pointers
       ;; they can be different as they are boxed. In that case we need to
       ;; unbox them.
       (simple-int-cmp (tv term1) (tv term2)))
      ((type-eq? (tt term1) '?)
       ;; We compare the runtime type, and if they're the same we compare the
       ;; actual value.
       ;; TODO: This is a little inefficient as coerce checks the type after
       ;; we've already checked it to even reach that block. A version of
       ;; 'coerce' that assumes the correct type could be handy.
       (let* ((runtime-type (llvm-build-call
                              $builder
                              (runtime-func "rt_type" NUC-VAL (list NUC-VAL))
                              (list (tv term1))
                              ""))
              (correct-type?
                (LLVMBuildICmp $builder LLVMIntEQ runtime-type
                               (type-id<-type-spec context (tt term2))
                               ""))
              (current-func (get-current-func $builder))
              (correct-type-block (LLVMAppendBasicBlock current-func "type-eq"))
              (wrong-type-block (LLVMAppendBasicBlock current-func "type-not-eq"))
              (after-block (LLVMAppendBasicBlock current-func "eq?-after")))
         (LLVMBuildCondBr $builder correct-type?  correct-type-block wrong-type-block)
         (LLVMPositionBuilderAtEnd $builder wrong-type-block)
         (LLVMBuildBr $builder after-block)
         (LLVMPositionBuilderAtEnd $builder correct-type-block)
         (let* ((converted (if (numeric? (tt term2))
                             (arithmetic-conversion
                               ;; TODO: Pass the source location of the 'eq?'
                               ;; token in, so we can use it instead of a dummy
                               ;; here
                               context (list term1 term2) $dummy-source-loc)
                             (list (tt term2)
                                   (tv (coerce context term1 (tt term2)
                                               ;; TODO: source loc of args
                                               $dummy-source-loc))
                                   (tv term2))))
                (typ (first converted))
                (ct-term (builtin-eq?
                           context
                           (list
                             (make-term typ (second converted) false)
                             (make-term typ (third converted) false))))
                (ct-resultant-block (LLVMGetInsertBlock $builder)))
           (LLVMBuildBr $builder after-block)
           (LLVMPositionBuilderAtEnd $builder after-block)
           (make-term
             'bool
             (llvm-phi $builder (llvm-type<-type-spec context 'bool)
                       (list (cons (tv ct-term) ct-resultant-block)
                             (cons (llvm-i32<-int 0) wrong-type-block))
                       "eq?")
             false))))
      ((type-eq? (tt term2) '?)
       ;; Reverse the order so we go into the case above where the type of the
       ;; first term is ?
       (builtin-eq? context (list term2 term1)))
      ((type-eq? (tt term1) (tt term2))
       (simple-int-cmp (tv term1) (tv term2)))
      ((and (numeric? (tt term1)) (numeric? (tt term2)))
       (let* ((type-and-vals (arithmetic-conversion context (list term1 term2)
                                                    ;; TODO: source loc
                                                    $dummy-source-loc))
              (typ (car type-and-vals))
              (vals (cdr type-and-vals)))
         (if (floating-point? typ)
           (make-term
             'bool
             (LLVMBuildFCmp $builder LLVMRealOEQ (tv term1) (tv term2) "")
             false)
           (simple-int-cmp (first vals) (second vals)))))
      (true
        (make-term 'bool (llvm-i32<-int 0) false)))))
