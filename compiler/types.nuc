;;; A 'term' is the compile-time form of a nucleus value. It has a corresponding
;;; LLVMValueRef, type, and boolean indicating whether it is an lvalue (i.e.
;;; can be assigned to). If the type is unknown, it defaults to ?, the dynamic
;;; type.
;;; TODO: It could be really useful to keep track of known null vs. non-null
;;; information about cons terms, to avoid some runtime checks. Sometimes we
;;; literally just allocated the thing so those cases are easy pickings.

(struct Term
  typ
  val ; TODO: add LLVMType annotation
  (lvalue? bool))

(defun tt ((term Term)) (Term.typ term))
(defun tv ((term Term)) (Term.val term))
(defun tl? ((term Term)) -> bool (Term.lvalue? term))

(defun coerce ((context Context) (term Term) typ blame-source-loc)
  (when $output-debug-info (format true "(coerce ... ~ ~)" term typ))
  (cond
    ((type-eq? (tt term) typ) term)
    ((type-eq? (tt term) '?)
     (Term typ
           (static-val<-dynamic-val context typ (tv term) blame-source-loc)
           (tl? term)))
    ((type-eq? typ '?)
     (Term typ
           (dynamic-val<-static-val context (tt term) (tv term) blame-source-loc)
           (tl? term)))
    (true
      (Term typ
            (implicit-conversion context term typ blame-source-loc)
            (tl? term)))))

;; TODO: I think there are a few cases where an ad-hoc version of this was
;; used inline which should now be using this instead.
(defun compatible? (given-type desired-type)
  (or (type-eq? given-type desired-type)
      (type-eq? given-type '?)
      (type-eq? desired-type '?)
      (and (integral? given-type) (numeric? desired-type))))

;; TODO: append "-type"

(defun numeric? (typ) (or (integral? typ) (floating-point? typ)))

(defun integral? (typ)
  (member? typ '(int uint long long-long char
                 u8 i8 i16 i32 i64)))

(defun floating-point? (typ)
  (type-eq? typ 'float))

(defun cons-type? (typ)
  (or (eq? typ 'cons)
      (and (cons? typ)
           (or (eq? (first typ) 'cons)
               (eq? (first typ) 'list-of)))))

(defun list-type? (typ) (and (cons? typ) (eq? (first typ) 'list-of)))

(defun func-type? (typ)
  (and (cons? typ) (or (eq? (first typ) 'any-func) (eq? (first typ) 'func))))

;; TODO: Rethink the naming convention here - maybe it should be CamelCase for
;; type names.
(struct Struct-type
  (name symbol)
  llvm-type ; TODO: annotation
  (id int)
  fields)

(struct Struct-field
  (name symbol)
  type)

;;; TODO: This should be a hash table.
;;; TODO: This should be in Context
(defvar $struct-types nil)
(defvar $struct-count 0)

(defun add-struct-type ((context Context) struct-name field-names field-types)
  (let* ((id $struct-count)
         (num-fields (length field-names))
         (struct-type (LLVMStructCreateNamed (LLVMGetGlobalContext)
                                             (string<-symbol struct-name)))
         (struct-pointer-type (LLVMPointerType struct-type 0)))
    (LLVMStructSetBody
      struct-type
      (map (lambda (type-spec)
             (llvm-type<-type-spec context type-spec))
           field-types)
      num-fields
      false)
    (set $struct-types
         (cons (cons struct-name
                     (Struct-type struct-name struct-pointer-type id
                                  (map2 (lambda (field-name field-type)
                                          (Struct-field (ts field-name)
                                                        field-type))
                                        field-names field-types)))
               $struct-types))
    (enumerate
      (lambda (field-index name-and-type)
        (let* ((field-name (ts (car name-and-type)))
               (field-type (cdr name-and-type))
               (getter-name (symbol<-string (format nil "~.~" struct-name field-name)))
               (setter-name (symbol<-string (format nil "~.~=" struct-name field-name)))
               (getter (add-func context getter-name '(arg)
                                 (list struct-name) field-type 'builtin nil))
               (setter (add-func context setter-name '(arg1 arg2)
                                 (list struct-name field-type)
                                 field-type 'builtin nil)))
          (LLVMPositionBuilderAtEnd $builder (LLVMAppendBasicBlock
                                               (Func.llvm-func getter)
                                               "entry"))
          (LLVMBuildRet
            $builder
            (LLVMBuildLoad
              $builder
              (LLVMBuildStructGEP
                $builder
                (first (llvm-params (Func.llvm-func getter)))
                field-index
                "")
              (string<-symbol field-name)))
          (LLVMPositionBuilderAtEnd $builder (LLVMAppendBasicBlock
                                               (Func.llvm-func setter)
                                               "entry"))
          (LLVMBuildStore
            $builder
            (second (llvm-params (Func.llvm-func setter)))
            (LLVMBuildStructGEP
              $builder
              (first (llvm-params (Func.llvm-func setter)))
              field-index
              ""))
          (LLVMBuildRet
            $builder
            (second (llvm-params (Func.llvm-func setter))))))
      (zip field-names field-types))
    (let ((constructor (add-func context struct-name
                                 (repeat num-fields 'arg)
                                 field-types struct-name 'builtin nil)))
      (LLVMPositionBuilderAtEnd $builder (LLVMAppendBasicBlock
                                           (Func.llvm-func constructor)
                                           "entry"))
      (let ((struct-value
              (LLVMBuildBitCast
                $builder
                (gc-alloc (LLVMABISizeOfType
                            (Context.target-data context) struct-type))
                struct-pointer-type
                "")))
        (enumerate
          (lambda (field-index param)
            (LLVMBuildStore
              $builder
              param
              (LLVMBuildStructGEP $builder struct-value field-index "")))
          (llvm-params (Func.llvm-func constructor)))
        (LLVMBuildRet $builder struct-value)))
    (set $struct-count (+ $struct-count 1))))

(defun get-struct-type ((name symbol))
  (assoc-cdr name $struct-types))

(defun type-eq? (t1 t2)
  (or (eq? t1 t2)
      (and (cons-type? t1) (cons-type? t2)
           (or (eq? t1 'cons) (eq? t2 'cons)
               (and (list-type? t1) (list-type? t2)
                    (type-eq? (second t1) (second t2)))
               (and (type-eq? (car-type t1) (car-type t2))
                    (type-eq? (cdr-type t1) (cdr-type t2)))))
      (and (func-type? t1) (func-type? t2)
           (eq? (func-type-arity t1) (func-type-arity t2))
           (or (eq? (car t1) 'any-func) (eq? (car t2) 'any-func)
               (and (all? (lambda (c) (type-eq? (car c) (cdr c)))
                          (zip (func-type-arg-types t1) (func-type-arg-types t2)))
                    (type-eq? (func-type-return-type t1) (func-type-return-type t2)))))
      (and (eq? t1 'int) (eq? t2 'i32))
      (and (eq? t2 'int) (eq? t1 'i32))))

(defun car-type (typ)
  (expand-type (if (or (eq? typ 'cons) (eq? typ '?)) '? (second typ))))
(defun cdr-type (typ)
  (expand-type (cond
                 ((or (eq? typ 'cons) (eq? typ '?)) '?)
                 ((eq? (first typ) 'list-of) typ)
                 (true (third typ)))))

(defun func-type-arity (type-spec)
  (if (eq? (first type-spec) 'any-func)
    (second type-spec)
    (length (second type-spec))))

;; TODO: Check we're using these everywhere we should
(defun func-type-arg-types (type-spec)
  (if (eq? (first type-spec) 'any-func)
    (repeat (second type-spec) '?)
    (second type-spec)))

(defun func-type-return-type (type-spec)
  (if (eq? (first type-spec) 'any-func)
    '?
    (fourth type-spec)))

(defun i64<-term ((context Context) (term Term))
  (case (LLVMGetTypeKind (llvm-type<-type-spec context (tt term)))
    (LLVMPointerTypeKind (LLVMBuildPtrToInt $builder (tv term) NUC-VAL ""))
    (LLVMIntegerTypeKind (LLVMBuildIntCast $builder (tv term) NUC-VAL ""))
    (LLVMFloatTypeKind
      (LLVMBuildIntCast
        $builder
        (LLVMBuildBitCast $builder (tv term) (LLVMIntType 32) "")
        (LLVMIntType 64)
        ""))
    (default (fail! context
                    (format nil "i64<-term not implemented for ~" (tt term))
                    $dummy-source-loc ; TODO: better source loc
                    NUC-VAL false))))

(defun term<-i64 ((context Context) val dest-type)
  (let ((llvm-type (llvm-type<-type-spec context dest-type)))
    (case (LLVMGetTypeKind llvm-type)
      (LLVMPointerTypeKind (LLVMBuildIntToPtr $builder val llvm-type ""))
      (LLVMIntegerTypeKind (LLVMBuildIntCast $builder val llvm-type ""))
      (LLVMFloatTypeKind
        (LLVMBuildBitCast
          $builder
          (LLVMBuildIntCast $builder val (LLVMIntType 32) "")
          (LLVMFloatType)
          ""))
      (default (fail! context
                      (format nil "term<-i64 not implemented for ~" dest-type)
                      $dummy-source-loc ; TODO: better source loc
                      llvm-type false)))))

(defun untag-cons (cons-val)
  (LLVMBuildIntToPtr $builder (remove-lowtag cons-val) CONS-CELL-PTR ""))

(defun untag-closure (closure-val)
  (LLVMBuildIntToPtr $builder (remove-lowtag closure-val) CLOSURE-PTR ""))

(defun expand-type (typ)
  (if (eq? typ 'cons)
    (list 'cons '? '?)
    typ))

(defun convert-cons ((context Context) cons-ptr src-type dest-type blame-source-loc)
  (when $output-debug-info
    (format true "(convert-cons ... ~ ~ ~ ~)" cons-ptr src-type dest-type blame-source-loc))
  (assert! (and (cons-type? src-type) (cons-type? dest-type))
           "src-type and dest-type must be cons types")
  (if (LLVMIsNull cons-ptr)
    (LLVMConstNull CONS-CELL-PTR)
    (let* ((current-func (get-current-func $builder))
           (non-nil-block (LLVMAppendBasicBlock current-func "non-nil-cons"))
           (after-block (LLVMAppendBasicBlock current-func "after-convert-cons")))
      (LLVMBuildCondBr
        $builder
        (LLVMBuildICmp $builder LLVMIntEQ cons-ptr (LLVMConstNull CONS-CELL-PTR) "")
        after-block non-nil-block)
      (LLVMPositionBuilderAtEnd $builder non-nil-block)
      (convert-cons-field context cons-ptr get-car-value set-car-value set-car-gr-value
                          (car-type src-type) (car-type dest-type) blame-source-loc)
      (convert-cons-field context cons-ptr get-cdr-value set-cdr-value set-cdr-gr-value
                          (cdr-type src-type) (cdr-type dest-type) blame-source-loc)
      (LLVMBuildBr $builder after-block)
      (LLVMPositionBuilderAtEnd $builder after-block)
      cons-ptr)))

(defun convert-cons-field ((context Context) cons-ptr field-getter field-setter gr-setter
                                   src-field-type dest-field-type blame-source-loc)
  (when $output-debug-info
    (format true "(convert-cons-field ... ~ ... ... ... ~ ~ ~)"
            cons-ptr src-field-type dest-field-type blame-source-loc))
  (unless (type-eq? src-field-type dest-field-type)
    (if (member? '? (list src-field-type dest-field-type))
      (gr-setter cons-ptr (llvm-i8<-int 1)))
    (cond
      ((or (type-eq? dest-field-type '?)
           (and (cons-type? src-field-type) (cons-type? dest-field-type)))
       (let* ((field-value
                (term<-i64 context (field-getter cons-ptr) src-field-type))
              (coerced-field
                (coerce context
                        (Term src-field-type field-value false)
                        dest-field-type
                        blame-source-loc)))
         (field-setter cons-ptr (i64<-term context coerced-field))))
      ((type-eq? src-field-type '?)
       ; nothing else to do
       )
      (true
        (fail! context
               (format nil "Static type error: tried to use a term of type '~' where '~' was expected"
                       src-field-type dest-field-type)
               blame-source-loc
               nil false)))))

(defun convert-list (cons-val convert get-next)
  (let* ((current-func (get-current-func $builder))
         (before-block (LLVMGetInsertBlock $builder))
         (loop-entry (LLVMAppendBasicBlock current-func "convert-list-entry"))
         (loop-body (LLVMAppendBasicBlock current-func "convert-list-body"))
         (after-block (LLVMAppendBasicBlock current-func "after-convert-list")))
    (LLVMBuildBr $builder loop-entry)
    (LLVMPositionBuilderAtEnd $builder loop-entry)
    (let ((current-cons (LLVMBuildPhi $builder (LLVMTypeOf cons-val) "current-cons")))
      (LLVMAddIncoming current-cons (list cons-val) (list before-block) 1)
      (LLVMBuildCondBr
        $builder
        (LLVMBuildICmp $builder LLVMIntEQ LLVM-NULL-CONS current-cons "nil?")
        after-block
        loop-body)
      (LLVMPositionBuilderAtEnd $builder loop-body)
      (let ((cdr-value (get-cdr-value current-cons)))
        (convert current-cons)
        (LLVMAddIncoming
          current-cons
          (list (LLVMBuildIntToPtr $builder (get-next cdr-value) CONS-CELL-PTR ""))
          (list (LLVMGetInsertBlock $builder)) 1))
      (LLVMBuildBr $builder loop-entry))
    (LLVMPositionBuilderAtEnd $builder after-block))
  cons-val)

(defun type-size ((context Context) typ)
  (LLVMGetIntTypeWidth (llvm-type<-type-spec context typ)))

(defun remove-lowtag (val)
  (LLVMBuildAnd $builder val
                ;; This is (~ (- (<< 1 LOWTAG-BITS) 1)).
                ;; We can't write that directly as it exceeds the 61-bit limit
                ;; of nucleus fixnums
                (LLVMConstIntOfString (LLVMIntType 64) "fffffffffffffff8" 16)
                "remove-lowtag"))

;;; TODO: rework some of this stuff

(defun add-lowtag (val tag)
  (LLVMBuildOr $builder
               (LLVMBuildPtrToInt $builder val NUC-VAL "ptr-to-int")
               (llvm-i64<-int tag) "add-lowtag"))

(defun fixnum<-llvm-int (val)
  (add-lowtag (LLVMBuildShl $builder val (llvm-i64<-int LOWTAG-BITS) "")
              FIXNUM-LOWTAG))

(defun check-type (val type-as-llvm-val)
  (llvm-build-call
    $builder
    (runtime-func "rt_check_type" VOID (list NUC-VAL NUC-VAL))
    (list val type-as-llvm-val)
    ""))

(defun check-struct-type (val type-id)
  (llvm-build-call
    $builder
    (runtime-func "rt_check_struct_type" VOID (list NUC-VAL (LLVMIntType 32)))
    (list val (llvm-i32<-int type-id))
    ""))

(defun llvm-i64<-int (x) (LLVMConstInt (LLVMIntType 64) x false))
(defun llvm-i32<-int (x) (LLVMConstInt (LLVMIntType 32) x false))
(defun llvm-i8<-int (x) (LLVMConstInt (LLVMIntType 8) x false))

;;; TODO: this should probably have an extra phase - converting into a nucleus
;;; type object.

;; TODO: This should have a way of taking a token for the type spec, so we can
;; blame the user when they enter an incorrect type
(defun llvm-type<-type-spec ((context Context) type-spec)
  (if (cons? type-spec)
    (case (first type-spec)
      ('cons CONS-CELL-PTR)
      ('list-of CONS-CELL-PTR)
      ('func CLOSURE-PTR)
      (default
        (fail! context (format nil "Unsupported compound type '~'"
                               (first type-spec))
               $dummy-source-loc ; TODO: better source loc
               nil false)
        NUC-VAL))
    (case type-spec
      ;; FFI stuff
      ('* UINTPTR)
      ('char (LLVMIntType 8))
      ('char* CHAR*)
      ('void VOID)
      ('int INT) ('uint INT) ('bool INT)
      ('long LONG)
      ('long-long LONG-LONG)
      ('array (LLVMPointerType UINTPTR 0))

      ;; Fixed width integer types.
      ;; TODO: We need to do unsigned types properly.
      ('u8 (LLVMIntType 8))
      ('i8 (LLVMIntType 8))
      ('i16 (LLVMIntType 16))
      ('i32 (LLVMIntType 32))
      ('i64 (LLVMIntType 64))

      ;; Primitive nucleus types
      ('? NUC-VAL)
      ('symbol (LLVMIntType 32))
      ('bool (LLVMIntType 32))
      ('string STRING-PTR)
      ('cons CONS-CELL-PTR)
      ('float (LLVMFloatType))

      (default
        (let ((struct-type (get-struct-type type-spec)))
          (cond
            ((not (nil? struct-type))
             (Struct-type.llvm-type struct-type))
            (true
              (fail! context
                     (format nil "Unsupported type-spec for llvm-type<-type-spec '~'" type-spec)
                     $dummy-source-loc ; TODO: better source loc
                     nil false)
              NUC-VAL)))))))

(defun type-id<-type-spec ((context Context) type-spec)
  (case type-spec
    ;; FFI stuff
    ('* LLVM-FOREIGN-T)
    ('char* LLVM-STRING-T)
    ;; TODO: We arbitrarily make calls to void functions evaluate to nil, so
    ;; void = cons. Should we make them be something else? A special purpose
    ;; value which isn't allowed to be used maybe?
    ('void LLVM-CONS-T)
    ('int LLVM-FIXNUM-T) ('uint LLVM-FIXNUM-T) ('long-long LLVM-FIXNUM-T)
    ('uint8 LLVM-FIXNUM-T) ('u8 LLVM-FIXNUM-T) ('i8 LLVM-FIXNUM-T)
    ('i32 LLVM-FIXNUM-T) ('i64 LLVM-FIXNUM-T)

    ('float LLVM-FLOAT-T)

    ;; Primitive nucleus types
    ('symbol LLVM-SYMBOL-T)
    ('bool LLVM-BOOL-T)
    ('string LLVM-STRING-T)
    ('cons LLVM-CONS-T)

    ;; This isn't actually the type of any value at runtime, as every dynamic
    ;; value has an actual underlying type. However, this is useful for
    ;; representing things such as argument types or struct field types, which
    ;; may be specified to be the dynamic type.
    ('? LLVM-DYNAMIC-T)

    (default
      (let ((struct-type (get-struct-type type-spec)))
        (if (not (nil? struct-type))
          ;; TODO: Once we have a proper runtime type object, this should
          ;; contain the ID as well.
          LLVM-STRUCT-T
          (fail! context
                 (format nil "Unsupported type-spec for type-id<-type-spec '~'" type-spec)
                 $dummy-source-loc ; TODO: better source loc
                 nil false)))
      LLVM-CONS-T)))

(defun static-val<-dynamic-val ((context Context) type-spec val blame-source-loc)
  (cond
    ((type-eq? type-spec '*)
     (check-type val LLVM-FOREIGN-T)
     (LLVMBuildIntToPtr
       $builder
       (LLVMBuildLoad
         $builder
         (LLVMBuildIntToPtr
           $builder (remove-lowtag val) (LLVMPointerType NUC-VAL 0) "")
         "")
       UINTPTR
       ""))
    ((type-eq? type-spec 'char*)
     (check-type val LLVM-STRING-T)
     (llvm-build-call
       $builder
       (runtime-func "rt_nuc_str_to_c_str" CHAR* (list NUC-VAL))
       (list val) "static-val<-dynamic-val"))
    ((integral? type-spec)
     (check-type val LLVM-FIXNUM-T)
     (LLVMBuildIntCast
       $builder
       (LLVMBuildAShr $builder val (llvm-i64<-int LOWTAG-BITS) "remove-int-tag")
       (llvm-type<-type-spec context type-spec)
       ""))
    ((floating-point? type-spec)
     (check-type val LLVM-FLOAT-T)
     (LLVMBuildBitCast
       $builder
       (LLVMBuildIntCast
         $builder
         (LLVMBuildLShr $builder val (llvm-i64<-int (+ LOWTAG-BITS EXTTAG-BITS)) "")
         (LLVMIntType 32)
         "")
       (llvm-type<-type-spec context type-spec)
       ""))
    ((type-eq? type-spec 'bool)
     (check-type val LLVM-BOOL-T)
     (LLVMBuildSelect $builder (LLVMBuildICmp $builder LLVMIntEQ val LLVM-TRUE "")
                      (llvm-i32<-int 1) (llvm-i32<-int 0) ""))
    ((type-eq? type-spec 'string)
     (check-type val LLVM-STRING-T)
     (LLVMBuildIntToPtr $builder (remove-lowtag val) STRING-PTR ""))
    ((type-eq? type-spec 'array)
     (check-type val LLVM-CONS-T)
     (llvm-build-call
       $builder
       (runtime-func "rt_list_to_array" (llvm-type<-type-spec context type-spec) (list NUC-VAL))
       (list val)
       "array<-list"))
    ((type-eq? type-spec 'symbol)
     (check-type val LLVM-SYMBOL-T)
     (LLVMBuildIntCast
       $builder
       (LLVMBuildLShr $builder val (llvm-i64<-int LOWTAG-BITS) "remove-symbol-lowtag")
       (llvm-type<-type-spec context type-spec)
       ""))
    ((list-type? type-spec)
     (let* ((list-elem-type (car-type type-spec))
            (elem-type-id (type-id<-type-spec context list-elem-type)))
       (check-type val LLVM-CONS-T)
       (convert-list
         (untag-cons val)
         (lambda (cons-ptr)
           (check-type (get-car-value cons-ptr) elem-type-id)
           (set-gr-value cons-ptr (llvm-i8<-int 3)))
         (lambda (cons-val)
           (check-type cons-val LLVM-CONS-T)
           (remove-lowtag cons-val))))
     (untag-cons val))
    ((cons-type? type-spec)
     (check-type val LLVM-CONS-T)
     (convert-cons context (untag-cons val) '(cons ? ?) type-spec blame-source-loc))
    ((func-type? type-spec)
     (check-type val LLVM-LAMBDA-T)
     (let ((closure-ptr (untag-closure val))
           (arity (func-type-arity type-spec)))
       (llvm-build-call
         $builder
         (runtime-func "rt_check_arity" VOID (list CLOSURE-PTR INT))
         (list closure-ptr (llvm-i32<-int arity))
         "")
       (if (or (any? (lambda (t) (not (eq? t '?)))
                     (func-type-arg-types type-spec))
               (not (eq? (func-type-return-type type-spec) '?)))
         ;; All closures stored as dynamic values must take dynamic values as
         ;; arguments and return dynamic values. If we are making a function that
         ;; doesn't, we must generate a proxy that does the coercions at runtime.
         (compile-proxy-function
           context
           (Term (list 'func (repeat arity '?) '-> '?) closure-ptr false)
           type-spec)
         ;; Otherwise we're all good, as the function type we want already
         ;; takes dynamic values and returns a dynamic value.
         closure-ptr)))
    ((type-eq? type-spec 'type)
     ;; TODO: We should have a separate exttag for types so that we can do a
     ;; check-type here.
     (LLVMBuildLShr $builder val (llvm-i64<-int (+ LOWTAG-BITS EXTTAG-BITS)) ""))
    (true
      (let ((struct-type (get-struct-type type-spec)))
        (cond
          ((not (nil? struct-type))
           (check-struct-type val (Struct-type.id struct-type))
           ;; We have to do two things:
           ;;  1) Remove the lowtag, which we do as usual
           ;;  2) Remove the struct tag
           ;; Removing the struct tag means replacing the top 16 bits with a
           ;; copy of the top 17th bit. We do this by shifting left by 16, and
           ;; then doing a sign-extending right shift by 16.
           (LLVMBuildIntToPtr
             $builder
             (LLVMBuildAShr
               $builder
               (LLVMBuildShl $builder (remove-lowtag val) (llvm-i64<-int 16) "")
               (llvm-i64<-int 16)
               "")
             (Struct-type.llvm-type struct-type)
             ""))
          (true
            (fail! context
                   (format nil "Unsupported type-spec '~'" type-spec)
                   blame-source-loc
                   CONS-CELL-PTR false)))))))

(defun dynamic-val<-static-val ((context Context) type-spec val blame-source-loc)
  (cond
    ((type-eq? type-spec '*)
      (add-lowtag
        (let ((box (gc-alloc PTR-BYTES)))
          (LLVMBuildStore $builder (LLVMBuildPtrToInt $builder val NUC-VAL "") box)
          box)
        FOREIGN-LOWTAG))
    ((type-eq? type-spec 'void) LLVM-NIL)
    ((integral? type-spec)
     (fixnum<-llvm-int (LLVMBuildIntCast $builder val NUC-VAL "cast-int-to-nuc-val")))
    ((type-eq? type-spec 'float)
     (LLVMBuildOr
       $builder
       (LLVMBuildShl
         $builder
         (LLVMBuildIntCast
           $builder
           (LLVMBuildBitCast $builder val (LLVMIntType 32) "")
           NUC-VAL
           "")
         (llvm-i64<-int (+ LOWTAG-BITS EXTTAG-BITS))
         "")
       (llvm-i64<-int (+ EXTTAG-LOWTAG (<< FLOAT-EXTTAG LOWTAG-BITS)))
       ""))
    ((type-eq? type-spec 'bool)
     (let ((zero (LLVMConstInt (LLVMTypeOf val) 0 false)))
       (LLVMBuildSelect $builder
                        (LLVMBuildICmp $builder LLVMIntEQ val zero "")
                        LLVM-FALSE LLVM-TRUE "")))
    ((type-eq? type-spec 'string)
     (add-lowtag val STRING-LOWTAG))
    ((type-eq? type-spec 'symbol)
     (LLVMBuildOr
       $builder
       (LLVMBuildShl $builder (LLVMBuildZExt $builder val NUC-VAL "")
                     (llvm-i64<-int LOWTAG-BITS)
                     "")
       (llvm-i64<-int SYMBOL-LOWTAG)
       ""))
    ((list-type? type-spec)
     (convert-list
       val
       (lambda (cons-ptr)
         (let* ((before-block (LLVMGetInsertBlock $builder))
                (current-func (get-current-func $builder))
                (not-already-gr-block (LLVMAppendBasicBlock current-func "not-already-gr"))
                (after-block (LLVMAppendBasicBlock current-func "after-not-already-gr"))
                (car-val (get-car-value cons-ptr)))
           (LLVMBuildCondBr
             $builder
             (LLVMBuildICmp $builder LLVMIntEQ (get-gr-value cons-ptr) (llvm-i8<-int 0) "")
             not-already-gr-block
             after-block)
           (LLVMPositionBuilderAtEnd $builder not-already-gr-block)
           (let ((converted
                   (tv (coerce
                         context
                         (Term
                           (car-type type-spec)
                           (term<-i64 context car-val (car-type type-spec))
                           false)
                         '?
                         ;; TODO: source loc
                         $dummy-source-loc)))
                 (non-gr-resultant-block (LLVMGetInsertBlock $builder)))
             (LLVMBuildBr $builder after-block)
             (LLVMPositionBuilderAtEnd $builder after-block)
             (set-car-value
               cons-ptr
               (llvm-phi $builder NUC-VAL
                         (list (cons car-val before-block)
                               (cons converted non-gr-resultant-block))))
             (set-gr-value cons-ptr (llvm-i8<-int 3))
             (set-cdr-value
               cons-ptr
               (add-lowtag (get-cdr-value cons-ptr) CONS-LOWTAG)))))
       (lambda (cons-ptr)
         ;; If its already a guarded reference, we need to remove the lowtag.
         ;; If not, the low bits are already 0 and this does nothing.
         (remove-lowtag cons-ptr)))
     (add-lowtag val CONS-LOWTAG))
    ((cons-type? type-spec)
     (add-lowtag
       (convert-cons context val type-spec '(cons ? ?) blame-source-loc)
       CONS-LOWTAG))
    ((type-eq? type-spec 'type)
     (LLVMBuildOr
       $builder
       (LLVMBuildShl $builder val (llvm-i32<-int (+ LOWTAG-BITS EXTTAG-BITS)) "")
       (llvm-i32<-int (+ EXTTAG-LOWTAG (<< DISCRETE-EXTTAG LOWTAG-BITS)))
       ""))
    ((func-type? type-spec)
     (let ((closure-ptr
             (if (and (all? (lambda (t) (eq? t '?)) (func-type-arg-types type-spec))
                      (eq? (func-type-return-type type-spec) '?))
               val
               (compile-proxy-function
                 context (Term type-spec val false)
                 (list 'func (repeat (func-type-arity type-spec) '?) '-> '?)))))
       (add-lowtag closure-ptr LAMBDA-LOWTAG)))
    (true
      (let ((struct-type (get-struct-type type-spec)))
        (if (not (nil? struct-type))
          ;; Add the lowtag, zero out the top 16 bits, add our struct tag.
          (LLVMBuildOr
            $builder
            (LLVMBuildAnd
              $builder
              (add-lowtag val STRUCT-LOWTAG)
              (llvm-i64<-int (- (<< 1 48) 1))
              "")
            ;; We do the left shift in LLVM-space so we don't have to deal
            ;; with a value which might need the top bit.
            (LLVMBuildShl
              $builder
              (llvm-i64<-int (Struct-type.id struct-type))
              (llvm-i64<-int 48)
              "")
            "")
          (fail! context
                 (format nil "Unsupported type-spec '~'" type-spec)
                 blame-source-loc
                 NUC-VAL false))))))

(defun implicit-conversion ((context Context) (term Term) typ blame-source-loc)
  (when $output-debug-info (format true "(implicit-conversion ... ~ ~)" term typ))
  (cond
    ((and (integral? (tt term)) (integral? typ))
     (LLVMBuildIntCast
       $builder
       (tv term)
       (llvm-type<-type-spec context typ)
       ""))
    ((and (integral? (tt term)) (floating-point? typ))
     (LLVMBuildSIToFP
       $builder
       (tv term)
       (llvm-type<-type-spec context typ)
       ""))
    ((and (floating-point? (tt term)) (integral? typ))
     (LLVMBuildFPToSI
       $builder
       (tv term)
       (llvm-type<-type-spec context typ)
       ""))
    ((and (floating-point? (tt term)) (floating-point? typ))
     (LLVMBuildFPExt
       $builder
       (tv term)
       (llvm-type<-type-spec context typ)
       ""))
    ((and (type-eq? (tt term) 'string) (type-eq? typ 'char*))
     (LLVMBuildBitCast
       $builder
       (LLVMBuildStructGEP $builder (tv term) 1 "")
       CHAR*
       ""))
    ;; TODO: this sucks
    ((and (type-eq? (tt term) 'cons) (type-eq? typ 'array))
     (llvm-build-call
       $builder
       (runtime-func "rt_list_to_array" (llvm-type<-type-spec context typ) (list NUC-VAL))
       (list (add-lowtag
               (convert-cons context (tv term) (tt term) '(cons ? ?) blame-source-loc)
               CONS-LOWTAG))
       "array<-list"))
    ((and (func-type? (tt term)) (func-type? typ))
     (cond
       ((not (and (eq? (func-type-arity (tt term)) (func-type-arity typ))))
        (fail! context
               (format nil "Static type error: function of incorrect arity ~ used where ~ was expected"
                       (func-type-arity (tt term)) (func-type-arity typ))
               blame-source-loc
               (llvm-type<-type-spec context typ) false))
       ((not (and
               (all? (lambda (c) (compatible? (car c) (cdr c)))
                     (zip (func-type-arg-types (tt term)) (func-type-arg-types typ)))
               (compatible? (func-type-return-type (tt term))
                            (func-type-return-type typ))))
        (fail! context
               (format nil "Static type error: function of type '~' used where '~' was expected"
                       (tt term) typ)
               blame-source-loc
               (llvm-type<-type-spec context typ) false))
       (true (compile-proxy-function context term typ))))
    ((and (list-type? (tt term)) (list-type? typ))
     (convert-list
       (tv term)
       (lambda (cons-ptr)
         ;; Call the second part 'X', just so that it compares equal. We only
         ;; want convert-cons to deal with the car field.
         (convert-cons context cons-ptr (list 'cons (car-type (tt term)) 'X)
                       (list 'cons (car-type typ) 'X) blame-source-loc))
       (lambda (cons-ptr) cons-ptr)))
    ((and (list-type? (tt term)) (cons-type? typ))
     (tv (coerce context
                 (Term (unroll-list-type context typ (car-type (tt term)))
                       (tv term)
                       (tl? term))
                 typ
                 blame-source-loc)))
    ((and (cons-type? (tt term)) (list-type? typ))
     (tv (coerce context
                 term
                 (unroll-list-type context (tt term) (car-type typ))
                 blame-source-loc)))
    ((and (cons-type? (tt term)) (cons-type? typ))
     (convert-cons context (tv term) (tt term) typ blame-source-loc))
    (true (fail! context
                 (format nil
                         "Static type error: tried to use a term of type '~' where '~' was expected"
                         (tt term) typ)
                 blame-source-loc
                 (llvm-type<-type-spec context typ) false))))

(defun unroll-list-type ((context Context) cons-type list-element-type)
  ;; Converting from a cons type to a list type (or vice versa) is  equivalent
  ;; to a conversion involving a partially
  ;; "unrolled" list type.
  ;; e.g.:
  ;;  (cons ? (cons int ?)) -> (list-of int)
  ;;   is equivalent to
  ;;  (cons ? (cons int ?)) -> (cons int (cons int (list-of int)))
  ;;
  ;; This transformation turns list-of<->cons coercions into cons<->dynamic
  ;; coercions, cons<->cons coercions, and list-of<->dynamic coercions, all of
  ;; which we already know how to do.
  (list 'cons
        list-element-type
        (if (or (list-type? (cdr-type cons-type))
                (not (cons-type? (cdr-type cons-type))))
          (list 'list-of list-element-type)
          (unroll-list-type context (cdr-type cons-type) list-element-type))))

;;; Given a list of terms (which are arguments to some arithmetic builtin) this
;;; converts them all to the "maximum" type, where f64 > f32 > i64 > i32 > i16 > i8
(defun arithmetic-conversion ((context Context) terms blame-source-loc)
  (let ((max-type 'u8)
        (terms
          (map
            (lambda (term)
              (if (or (type-eq? (tt term) '?) (numeric? (tt term)))
                term
                (fail! context
                       (format nil "Static type error: tried to use a term of type '~' where a numeric type was expected" (tt term))
                       blame-source-loc
                       'i64 false)))
            terms)))
    (each (lambda (term)
            (let ((typ (tt term)))
              ;; TODO: change this when we have doubles
              (if (or (floating-point? typ)
                      (and (not (floating-point? max-type))
                           (> (type-size context typ) (type-size context max-type))))
                (set max-type typ))))
          terms)
    ;; We need to make sure we have an actual integral type at this point, not
    ;; a tagged value.
    ;; TODO: We shouldn't assume it's an integer just because it's dynamic, we
    ;; need to check for float too.
    (if (type-eq? max-type '?)
      (set max-type 'i64))
    (cons max-type
          (map (lambda (term) (tv (coerce context term max-type blame-source-loc)))
               terms))))

;;; Dump all the information we have about struct types into a table accessible
;;; at runtime. For now we just dump names.
(defun generate-type-table ((context Context))
  (when $output-debug-info
    (format true "Generating type info table with ~ entries" $struct-count))
  ;; NOTE: These correspond to the structures defined in runtime/src/types.c
  (let* ((type-info-struct
           (LLVMStructCreateNamed (LLVMGetGlobalContext) "StructInfo"))
         (field-info-struct
           (LLVMStructCreateNamed (LLVMGetGlobalContext) "FieldInfo"))
         (global-table-size
           (LLVMAddGlobal $module (LLVMIntType 32) "nuc_type_info_table_size"))
         (global-table
           (LLVMAddGlobal $module (LLVMArrayType
                                    type-info-struct
                                    (if (Context.emit-struct-info context)
                                      $struct-count
                                      0))
                          "nuc_type_info_table")))
    (LLVMStructSetBody
      type-info-struct
      (list CHAR* (LLVMIntType 32) (LLVMPointerType field-info-struct 0))
      3
      false)
    (LLVMStructSetBody
      field-info-struct
      (list CHAR* NUC-VAL (LLVMIntType 32))
      3
      false)
    (cond
      ((Context.emit-struct-info context)
       (LLVMSetInitializer global-table-size (llvm-i32<-int $struct-count))
       (LLVMSetInitializer
         global-table
         (LLVMConstArray
           type-info-struct
           (reverse
             (map (lambda (struct-type)
                    (let* ((struct-type (cdr struct-type))
                           (num-fields
                             (length (Struct-type.fields struct-type)))
                           (field-info-table
                             (LLVMAddGlobal
                               $module (LLVMArrayType field-info-struct num-fields)
                               (format nil "nuc_field_info_table(~)"
                                       (Struct-type.name struct-type)))))
                      (LLVMSetInitializer
                        field-info-table
                        (LLVMConstArray
                          field-info-struct
                          (map2
                            (lambda (field-index field)
                              (LLVMConstNamedStruct
                                field-info-struct
                                (list (global-string
                                        (string<-symbol (Struct-field.name field)))
                                      (type-id<-type-spec context (Struct-field.type field))
                                      (llvm-i32<-int
                                        (LLVMOffsetOfElement
                                          (Context.target-data context)
                                          (LLVMGetElementType
                                            (Struct-type.llvm-type struct-type))
                                          field-index)))
                                3))
                            (range num-fields)
                            (Struct-type.fields struct-type))
                          num-fields))
                      (LLVMConstNamedStruct
                        type-info-struct
                        (list (global-string
                                (string<-symbol (Struct-type.name struct-type)))
                              (llvm-i32<-int num-fields)
                              (LLVMBuildGEP
                                $builder field-info-table
                                (list (llvm-i64<-int 0) (llvm-i64<-int 0))
                                2
                                ""))
                        3)))
                  $struct-types))
           $struct-count)))
      (true
        (LLVMSetInitializer global-table-size (llvm-i32<-int (- 0 1)))
        (LLVMSetInitializer
          global-table (LLVMConstArray type-info-struct nil 0))
        ; TODO: Fix the bug that prevents void-returning functions from sitting
        ; at the end of branch
        nil))))
