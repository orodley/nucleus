;;;; This file defines all functions relating to input and output.

(extern (rt_stream_get_line stream-line) (?) -> ?)
(extern (rt_stream_get_col stream-col) (?) -> ?)
(extern (rt_stream_get_source_name stream-source-name) (?) -> ?)
(extern (rt_write_char_to_stream write-char-to-stream) (? ?) -> ?)
(extern (rt_read_char_from_stream read-char-from-stream) (?) -> ?)
(extern (rt_unread_char back-up-char) (? ?) -> ?)
(extern (rt_write_string_to_stream write-string-to-stream) (? ?) -> ?)
(extern (rt_write_string_ln_to_stream write-string-ln-to-stream) (? ?) -> ?)
(extern (rt_write_addr_to_stream %write-addr-to-stream) (? ?) -> ?)
(extern (rt_symbol_to_string string<-symbol) (?) -> ?)
(extern (rt_string_to_symbol symbol<-string) (?) -> ?)
(extern (rt_make_string_stream make-string-stream) (?) -> ?)
(extern (rt_string_stream_to_string string<-string-stream) (?) -> ?)

(defun read-char ()
  (read-char-from-stream $stdin))

(defun write-char (c)
  (write-char-to-stream $stdout c))

(defun write-string (str)
  (write-string-to-stream $stdout str))

(defun write-string-ln (str)
  (write-string-ln-to-stream $stdout str))

(defun print (sexp)
  (print-to-stream $stdout sexp))

(defun println (sexp)
  (print sexp)
  (write-string-ln ""))

(defun plr (sexp)
  (println sexp)
  sexp)

(defun print-to-stream (stream sexp)
  (case (type sexp)
    (fixnum-t
      (cond
        ((< sexp 0)
         (write-char-to-stream stream 45) ; '-'
         (print-fixnum stream (- 0 sexp) 0))
        (true
          (print-fixnum stream sexp 0))))
    (cons-t (print-cons stream sexp))
    (symbol-t (write-string-to-stream stream (string<-symbol sexp)))
    (string-t
      (write-char-to-stream stream 34)
      (write-string-to-stream stream sexp)
      (write-char-to-stream stream 34))
    (lambda-t (write-string-to-stream stream "#<lambda>"))
    (bool-t (write-string-to-stream stream (if sexp "true" "false")))
    (foreign-t (%write-addr-to-stream stream sexp))
    (struct-t
      ;; TODO: A proper implementation of this. We need to generate a table
      ;; containing name and field information for each struct, keyed on ID.
      (write-string-to-stream stream (struct-name sexp)))
    (default
      (panic! "Can't print this type"))))

(defun print-fixnum (stream x zero-padding)
  (let* ((ndigits (if (eq? x 0) 1 (int (floor (+ 1 (log10 (float x)))))))
         (zeroes (- zero-padding ndigits))
         (multiplier (expt 10 (- ndigits 1))))
    (when (> zeroes 0)
      (upto zeroes (lambda (_) (write-char-to-stream stream 48))))
    (write-char-to-stream stream (+ (/ x multiplier) 48))
    (unless (< x 10)
      (print-fixnum stream (- x (* (/ x multiplier) multiplier)) (- ndigits 1)))))

(defun print-cons (stream c)
  (cond
    ((nil? c) (write-string-to-stream stream "nil"))
    (true (write-string-to-stream stream "(")
          (print-to-stream stream (car c))
          (%print-tail stream (cdr c)))))

(defun %print-tail (stream c)
  (cond
    ((nil? c)
     (write-string-to-stream stream ")"))
    ((cons? c)
     (write-string-to-stream stream " ")
     (print-to-stream stream (car c))
     (%print-tail stream (cdr c)))
    (true
     (write-string-to-stream stream " . ")
     (print-to-stream stream c)
     (write-string-to-stream stream ")"))))


;;; When and only when EOF is reached, read returns a value eq? to this
(defvar EOF (cons nil nil))

(defun read ()
  (read-from-stream $stdin))

(defun read-all-with-source-loc (stream)
  (let ((list-head (cons nil nil)))
    (%read-all-with-source-loc list-head stream)
    (cdr list-head)))

(defun %read-all-with-source-loc (list-head stream)
  (let ((token (read-from-stream-with-source-loc stream)))
    (cond
      ((not (eq? (Token.sexpr token) EOF))
       (set-cdr list-head (cons token nil))
       (%read-all-with-source-loc (cdr list-head) stream)))))

(defun read-from-stream (stream)
  (%read-from-stream stream false))

(defun read-from-stream-with-source-loc (stream)
  (%read-from-stream stream true))

(struct Token
  sexpr
  source-loc)

(struct Source-loc
  source-name
  line
  col)

(defun %read-from-stream (stream track-source-loc?)
  (skip-any-comments-or-whitespace stream)
  (let* ((source-name (stream-source-name stream))
         (line (stream-line stream))
         (col (stream-col stream))
         (c (read-char-from-stream stream))
         (sexpr
           (cond
             ((eq? c 34)
              (let ((list-head (cons nil nil)))
                (read-string stream list-head)
                (string<-char-list (cdr list-head))))
             ((and (<= 48 c) (<= c 57)) (read-fixnum stream (- c 48)))
             ((eq? c 40)
              (let ((list-head (cons nil nil)))
                (read-list stream list-head track-source-loc?)
                (cdr list-head)))
             ((eq? c 39)
              (let ((quoted (%read-from-stream stream track-source-loc?)))
                (when (eq? quoted EOF)
                  (panic! "Encountered single quote at EOF"))
                (list (if track-source-loc?
                        (Token 'quote (Source-loc source-name line col))
                        'quote)
                      quoted)))
             ((eof? c) EOF)
             (true
               (let ((list-head (cons c nil)))
                 (read-symbol stream list-head)
                 (symbol<-string (string<-char-list list-head)))))))
    (if track-source-loc?
      (Token sexpr (Source-loc source-name line col))
      sexpr)))

(defun skip-any-comments-or-whitespace (stream)
  (let ((c (read-char-from-stream stream)))
    (cond
      ((eq? c 59) ; 59 = ';'
       (skip-comment stream)
       (skip-any-comments-or-whitespace stream))
      ((whitespace? c)
       (skip-any-comments-or-whitespace stream))
      (true
        (back-up-char stream c)))))

(defun skip-comment (stream)
  (let ((c (read-char-from-stream stream)))
    (unless (eq? c 10) ; '\n'
      (skip-comment stream))))

(defun read-string (stream list-head)
  (let ((c (read-char-from-stream stream)))
    (cond
      ((eq? c 34) nil)
      (true
        (set-cdr list-head (cons c nil))
        (read-string stream (cdr list-head))))))

(defun read-fixnum (stream acc)
  (let ((c (read-char-from-stream stream)))
    (cond
      ((and (<= 48 c) (<= c 57))
       (read-fixnum stream (+ (* acc 10) (- c 48))))
      (true
        (back-up-char stream c)
        acc))))

(defun read-list (stream list-head track-source-loc?)
  (skip-any-comments-or-whitespace stream)
  (let ((c (read-char-from-stream stream)))
    (cond
      ((eq? c 41) ; 41 = ')'
       nil)
      (true
        (back-up-char stream c)
        (set-cdr list-head (cons (%read-from-stream stream track-source-loc?) nil))
        (read-list stream (cdr list-head) track-source-loc?)))))

(defun read-symbol (stream list-head)
  (let ((c (read-char-from-stream stream)))
    (cond
      ((symbol-char? c)
       (set-cdr list-head (cons c nil))
       (read-symbol stream (cdr list-head)))
      (true
        (back-up-char stream c)))))

;; TODO: this should check for the nucleus EOF, not the C one
(defun eof? (c)
  (< c 0))

(defun symbol-char? (c)
  (and (not (eof? c))
       (not (member? c (list 59 32 10 34 39 40 41)))))

(defun whitespace? (c)
  ;; ' ' or '\n' or '\t' 
  (or (eq? c 32) (eq? c 10) (eq? c 9)))

;;; TODO: Once we have varargs we should define this as a variable arity
;;; function rather than having a compiler builtin.
;;; TODO: Also once we have varargs we can easily create a wrapper that appends
;;; a newline rather than doing it by default
(defun %format (stream-spec format-str arg-list)
  (let ((stream (case stream-spec
                  (true $stdout)
                  (nil (make-string-stream ""))
                  (default stream-spec)))
        (len (length format-str)))
    (upto len
          (lambda (i)
            (let ((c (char-at format-str i)))
              (cond
                ((eq? c 126)
                 (assert! (not (nil? arg-list)) "Not enough args to format.")
                 (print-to-stream stream (car arg-list))
                 (set arg-list (cdr arg-list)))
                (true (write-char-to-stream stream c))))))
    ;; Hacky - we generally want to print a trailing newline when we're
    ;; printing debug stuff, but not for formatting strings and such. This is a
    ;; stopgap measure until we have a nice wrapper function that appends a
    ;; newline.
    (when (eq? stream-spec true)
      (write-char-to-stream stream 10))
    (if (eq? stream-spec nil)
      (string<-string-stream stream)
      nil)))
