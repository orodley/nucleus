;;;; Everything to do with conses

(defun cons (a b) (cons a b))

(extern (rt_set_car set-car) (? ?) -> ?)
(extern (rt_set_cdr set-cdr) (? ?) -> ?)

(extern (rt_char_list_to_string string<-char-list) (?) -> ?)
(extern (rt_string_to_char_list char-list<-string) (?) -> ?)


(defun car (c) (car c))
(defun cdr (c) (cdr c))
(defun rest (lizt) (cdr lizt))

(defun caar (c) (car (car c)))
(defun cadr (c) (car (cdr c)))
(defun cdar (c) (cdr (car c)))
(defun cddr (c) (cdr (cdr c)))
(defun caaar (c) (car (car (car c))))
(defun caadr (c) (car (car (cdr c))))
(defun cadar (c) (car (cdr (car c))))
(defun caddr (c) (car (cdr (cdr c))))
(defun cdaar (c) (cdr (car (car c))))
(defun cdadr (c) (cdr (car (cdr c))))
(defun cddar (c) (cdr (cdr (car c))))
(defun cdddr (c) (cdr (cdr (cdr c))))
(defun caaaar (c) (car (car (car (car c)))))
(defun caaadr (c) (car (car (car (cdr c)))))
(defun caadar (c) (car (car (cdr (car c)))))
(defun caaddr (c) (car (car (cdr (cdr c)))))
(defun cadaar (c) (car (cdr (car (car c)))))
(defun cadadr (c) (car (cdr (car (cdr c)))))
(defun caddar (c) (car (cdr (cdr (car c)))))
(defun cadddr (c) (car (cdr (cdr (cdr c)))))
(defun cdaaar (c) (cdr (car (car (car c)))))
(defun cdaadr (c) (cdr (car (car (cdr c)))))
(defun cdadar (c) (cdr (car (cdr (car c)))))
(defun cdaddr (c) (cdr (car (cdr (cdr c)))))
(defun cddaar (c) (cdr (cdr (car (car c)))))
(defun cddadr (c) (cdr (cdr (car (cdr c)))))
(defun cdddar (c) (cdr (cdr (cdr (car c)))))
(defun cddddr (c) (cdr (cdr (cdr (cdr c)))))

(defun first (lizt) (car lizt))
(defun second (lizt) (cadr lizt))
(defun third (lizt) (caddr lizt))
(defun fourth (lizt) (cadddr lizt))
(defun fifth (lizt) (car (cddddr lizt)))
(defun sixth (lizt) (cadr (cddddr lizt)))
(defun seventh (lizt) (caddr (cddddr lizt)))
(defun eighth (lizt) (cadddr (cddddr lizt)))

(defun last (lizt)
  (cond
    ((nil? lizt) nil)
    ((nil? (cdr lizt)) lizt)
    (true (last (cdr lizt)))))

(defun cons? (x)
  (eq? (type x) cons-t))

(defun nil? (x)
  (eq? x nil))

(defun list? (x)
  (or (cons? x) (nil? x)))

(defun member? (elem lizt)
  (if (nil? lizt)
    false
    (or (eq? (car lizt) elem)
        (member? elem (cdr lizt)))))

(defun length (seq)
  (case (type seq)
    (cons-t (list-length seq 0))
    (string-t (string-length seq))))

(defun list-length (lizt acc)
  (if (nil? lizt)
    acc
    (list-length (cdr lizt) (+ 1 acc))))

(defun length-is? ((lizt cons) (len int)) -> bool
  (cond
    ((< len 0) false)
    ((nil? lizt) (eq? len 0))
    (true (length-is? (cdr lizt) (- len 1)))))

(defun length>= (lizt len)
  (cond
    ((< len 0) false)
    ((nil? lizt) (eq? len 0))
    ((eq? len 0) true)
    (true (length>= (cdr lizt) (- len 1)))))

(defun map (func lizt)
  (let ((list-head (cons nil nil)))
    (%map list-head func lizt)
    (cdr list-head)))

(defun %map (list-head func lizt)
  (unless (nil? lizt)
    (set-cdr list-head (cons (func (car lizt)) nil))
    (%map (cdr list-head) func (cdr lizt))))

;; TODO: make a varargs version
(defun map2 (func l1 l2)
  (let ((list-head (cons nil nil)))
    (%map2 list-head func l1 l2)
    (cdr list-head)))

(defun %map2 (list-head func l1 l2)
  (unless (or (nil? l1) (nil? l2))
    (set-cdr list-head (cons (func (car l1) (car l2)) nil))
    (%map2 (cdr list-head) func (cdr l1) (cdr l2))))

(defun zip (l1 l2) (map2 cons l1 l2))
(defun zipl (l1 l2) (map2 (lambda (a b) (list a b)) l1 l2))

(defun filter (func lizt)
  (let ((list-head (cons nil nil)))
    (%filter list-head func lizt)
    (cdr list-head)))

(defun %filter (list-head func lizt)
  (unless (nil? lizt)
    (%filter
      (cond ((func (first lizt))
             (set-cdr list-head (cons (first lizt) nil))
             (cdr list-head))
            (true list-head))
      func (cdr lizt))))

(defun find (pred lizt)
  (cond
    ((nil? lizt) nil)
    ((pred (car lizt)) (car lizt))
    (true (find pred (cdr lizt)))))

(defun assoc (kar alist)
  (find (lambda (kons) (eq? (car kons) kar)) alist))

(defun assoc-cdr (kar alist)
  (let ((kons (assoc kar alist)))
    (if (nil? kons)
      nil
      (cdr kons))))

(defun list-eq? (l1 l2)
  (cond ((nil? l1) (nil? l2))
        ((nil? l2) (nil? l1))
        (true (and (eq? (car l1) (car l2))
                   (list-eq? (cdr l1) (cdr l2))))))

(defun copy-list (lizt)
  (if (nil? lizt)
    nil
    (let ((list-head (cons nil nil)))
      (%copy-list lizt list-head)
      (cdr list-head))))

(defun %copy-list (lizt list-head)
  (unless (nil? lizt)
    (set-cdr list-head (cons (car lizt) nil))
    (%copy-list (cdr lizt) (cdr list-head))))

(defun append (l1 l2)
  (append! (copy-list l1) (copy-list l2)))

(defun append! (l1 l2)
  (cond
    ((nil? l1) l2)
    ((nil? l2) l1)
    (true
      (%append! l1 l2)
      l1)))

(defun %append! (l1 l2)
  (if (nil? (cdr l1))
     (set-cdr l1 l2)
     (%append! (cdr l1) l2)))

(defun mappend (func lizt)
  (if (nil? lizt)
    nil
    (reduce append (map func lizt))))

(defun reduce (func lizt)
  (if (nil? lizt)
    (panic! "reduce called on an empty list")
    (%reduce func (cdr lizt) (car lizt))))

(defun %reduce (func lizt acc)
  (if (nil? lizt)
    acc
    (%reduce func (cdr lizt) (func acc (car lizt)))))

;; TODO: make this faster using a hash table once those exist
(defun unique (lizt)
  (%unique lizt nil))

(defun %unique (lizt acc)
  (if (nil? lizt)
    acc
    (%unique (cdr lizt) (if (member? (car lizt) (cdr lizt))
                          acc
                          (cons (car lizt) acc)))))

(defun reverse (lizt)
  (reduce (lambda (a b) (cons b a)) (cons nil lizt)))

(defun repeat (times thing)
  (%repeat times thing nil))

(defun %repeat (times thing acc)
  (if (zero? times)
    acc
    (%repeat (- times 1) thing (cons thing acc))))

(defun range (top)
  (let ((list-head (cons nil nil)))
    (%range top 0 list-head)
    (cdr list-head)))

(defun %range (top current list-head)
  (unless (eq? top current)
    (set-cdr list-head (cons current nil))
    (%range top (+ 1 current) (cdr list-head))))
