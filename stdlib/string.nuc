;; TODO: I think the convention should be "str" instead of "string" to make it
;; less verbose

(defun string? (thing)
  (eq? (type thing) string-t))

(defun string-eq? (s1 s2)
  ;; TODO: iterate instead of consing up huge lists needlessly
  (list-eq? (char-list<-string s1) (char-list<-string s2)))

(extern (rt_string_length string-length) (string) -> i64)
(extern (rt_char_at char-at) (string uint) -> char)
;; TODO: should we have a substring function that doesn't copy?
(extern (rt_substring substring) (string i64 i64) -> string)

(defun string-concat (str1 str2)
  ;; TODO: make this not be a performance disaster
  ;; TODO: should be varargs
  (string<-char-list (append (char-list<-string str1)
                             (char-list<-string str2))))

(defun string-starts-with? (str prefix)
  ;; TODO: make this not be a performance disaster
  (let ((str-len (string-length str))
        (prefix-len (string-length prefix)))
    (and (>= str-len prefix-len)
         (string-eq? (substring str 0 prefix-len) prefix))))

(defun string-ends-with? (str suffix)
  ;; TODO: make this not be a performance disaster
  (let ((str-len (string-length str))
        (suffix-len (string-length suffix)))
    (and (>= str-len suffix-len)
         (string-eq? (substring str (- str-len suffix-len) str-len) suffix))))

(defun string-strip-prefix (str prefix)
  (if (string-starts-with? str prefix)
    (substring str 0 (string-length prefix))
    str))

(defun string-trim-left (str chars)
  (let ((char-bag (if (eq? (type chars) string-t)
                    (char-list<-string chars)
                    chars)))
    (if (member? (char-at str 0) char-bag)
      (string-trim-left (substring str 1 (string-length str)) char-bag)
      str)))

(defun string-trim-right (str chars)
  (let ((char-bag (if (eq? (type chars) string-t)
                    (char-list<-string chars)
                    chars)))
    (if (member? (char-at str (- (string-length str) 1)) char-bag)
      (string-trim-right (substring str 0 (- (string-length str) 1)) char-bag)
      str)))

(defun string-split (str delimiters)
  (let ((delimiters (case (type delimiters)
                      (string-t (char-list<-string delimiters))
                      (fixnum-t (list delimiters))
                      (cons-t delimiters))))
    (filter (lambda (str) (not (string-eq? str "")))
            (reverse (%string-split str delimiters 0 0 nil)))))

(defun %string-split (str delimiters start-index curr-index acc)
  (if (eq? curr-index (string-length str))
    (cons (substring str start-index curr-index) acc)
    (if (member? (char-at str curr-index) delimiters)
      (%string-split str delimiters (+ curr-index 1) (+ curr-index 1)
                     (cons (substring str start-index curr-index) acc))
      (%string-split str delimiters start-index (+ curr-index 1) acc))))
